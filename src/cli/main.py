"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram AI Companion
"""
import asyncio
import sys
import signal
from typing import Optional
import click
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from src.config.settings import settings, character_settings
from src.core.message_monitor import MessageMonitor
from src.database.database import db_manager
from src.utils.helpers import setup_logging
import json

@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    async def _status():
        status = await app.get_status()
        
        click.echo("\nüìä –°—Ç–∞—Ç—É—Å Telegram AI Companion:")
        click.echo(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status.get('monitoring') else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        click.echo(f"   Telegram: {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' if status.get('telegram_connected') else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}")
        click.echo(f"   –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤: {status.get('response_queue_size', 0)}")
        click.echo(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {status.get('active_chats', 0)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞
        telegram_stats = status.get('telegram_stats', {})
        if telegram_stats:
            click.echo(f"\nüì± Telegram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            click.echo(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {telegram_stats.get('messages_sent', 0)}")
            click.echo(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {telegram_stats.get('successful_requests', 0)}")
            click.echo(f"   –û—à–∏–±–æ–∫: {telegram_stats.get('failed_requests', 0)}")
            click.echo(f"   –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {telegram_stats.get('reconnections', 0)}")
        
        # –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
        if status.get('response_queue_size', 0) > 0:
            click.echo(f"\n‚è∞ –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤:")
            queue_info = status.get('queue_info', [])
            for item in queue_info[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                time_to_send = item.get('time_to_send_seconds', 0)
                if time_to_send > 0:
                    click.echo(f"   –ß–∞—Ç {item['chat_id']}: —á–µ—Ä–µ–∑ {time_to_send:.0f}—Å - {item['message_preview']}")
                else:
                    click.echo(f"   –ß–∞—Ç {item['chat_id']}: –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ - {item['message_preview']}")
    
    asyncio.run(_status())


@cli.command()
@click.option('--chat-id', '-c', type=int, help='ID —á–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
def stats(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤"""
    async def _stats():
        if chat_id:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            stats = db_manager.get_conversation_stats(chat_id)
            if not stats['total_messages']:
                click.echo(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
                return
            
            click.echo(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id}:")
            click.echo(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
            click.echo(f"   –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['user_messages']}")
            click.echo(f"   –û—Ç –ò–ò: {stats['ai_messages']}")
            click.echo(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {stats['response_rate']:.1%}")
            
            if stats['conversation_duration_seconds']:
                duration_hours = stats['conversation_duration_seconds'] / 3600
                click.echo(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞: {duration_hours:.1f} —á–∞—Å–æ–≤")
                click.echo(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {stats['messages_per_day']:.1f}")
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            context = db_manager.get_chat_context(chat_id)
            if context:
                click.echo(f"\nüéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                click.echo(f"   –°—Ç–∞–¥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {context.relationship_stage}")
                if context.detected_interests:
                    interests = json.loads(context.detected_interests)
                    click.echo(f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}")
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            active_chats = db_manager.get_active_chats()
            click.echo(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            click.echo(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(active_chats)}")
            
            total_messages = 0
            total_ai_messages = 0
            for chat in active_chats:
                stats = db_manager.get_conversation_stats(chat.id)
                total_messages += stats['total_messages']
                total_ai_messages += stats['ai_messages']
            
            click.echo(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
            click.echo(f"   –û—Ç–≤–µ—Ç–æ–≤ –ò–ò: {total_ai_messages}")
            
            if active_chats:
                click.echo(f"\nüí¨ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:")
                for chat in active_chats[:5]:
                    stats = db_manager.get_conversation_stats(chat.id)
                    name = chat.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    click.echo(f"   {name} ({chat.id}): {stats['total_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    asyncio.run(_stats())


@cli.command()
def queue():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤"""
    async def _queue():
        status = await app.get_status()
        queue_size = status.get('response_queue_size', 0)
        
        if queue_size == 0:
            click.echo("üì≠ –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        click.echo(f"\n‚è∞ –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ ({queue_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
        click.echo("-" * 80)
        
        queue_info = status.get('queue_info', [])
        for i, item in enumerate(queue_info, 1):
            time_to_send = item.get('time_to_send_seconds', 0)
            delay_reason = item.get('delay_reason', 'unknown')
            
            if time_to_send > 0:
                if time_to_send < 60:
                    time_str = f"{time_to_send:.0f}—Å"
                else:
                    time_str = f"{time_to_send/60:.1f}–º–∏–Ω"
                status_str = f"—á–µ—Ä–µ–∑ {time_str}"
            else:
                status_str = "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
            
            click.echo(f"{i}. –ß–∞—Ç {item['chat_id']} - {status_str}")
            click.echo(f"   –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏: {delay_reason}")
            click.echo(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {item['message_preview']}")
            click.echo()
    
    asyncio.run(_queue())


@cli.command()
def unanswered():
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã —Å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    unanswered_chats = db_manager.get_unanswered_chats(hours_threshold=2)
    
    if not unanswered_chats:
        click.echo("‚úÖ –ù–µ—Ç —á–∞—Ç–æ–≤ —Å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        return
    
    click.echo(f"\n‚ö†Ô∏è –ß–∞—Ç—ã —Å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ({len(unanswered_chats)}):")
    click.echo("-" * 60)
    
    for chat in unanswered_chats:
        name = chat.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{chat.username}" if chat.username else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = db_manager.get_chat_messages(chat.id, limit=1)
        if messages:
            last_msg = messages[-1]
            time_ago = (datetime.utcnow() - last_msg.created_at).total_seconds() / 3600
            click.echo(f"üë§ {name} {username} (ID: {chat.id})")
            click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {time_ago:.1f}—á –Ω–∞–∑–∞–¥: {last_msg.text[:50]}...")
            click.echo()


@cli.command()
@click.option('--days', '-d', default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')
def cleanup(days: int):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    click.echo(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    deleted_count = db_manager.cleanup_old_messages(days_to_keep=days)
    
    if deleted_count > 0:
        click.echo(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        click.echo("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


class TelegramAIApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.monitor: Optional[MessageMonitor] = None
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        self.is_running = False
        if self.monitor:
            asyncio.create_task(self.monitor.stop())
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.monitor = MessageMonitor()
            self.is_running = True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram AI Companion...")
            logger.info(f"üì± –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_settings.name}, {character_settings.age} –ª–µ—Ç")
            logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.monitor_interval} —Å–µ–∫—É–Ω–¥")
            
            await self.monitor.start()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if self.monitor:
                await self.monitor.stop()
            logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def send_message(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.monitor:
            self.monitor = MessageMonitor()
            if not await self.monitor.telegram_client.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
                return False
            if not await self.monitor.telegram_client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False
        
        success = await self.monitor.send_manual_message(user_id, message)
        if success:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        return success
    
    async def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.monitor:
            return {
                'status': 'stopped',
                'monitoring': False,
                'telegram_connected': False
            }
        
        status = self.monitor.get_status()
        return status
    
    async def get_dialogs(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not self.monitor:
            self.monitor = MessageMonitor()
            if not await self.monitor.telegram_client.initialize():
                return []
            if not await self.monitor.telegram_client.connect():
                return []
        
        return await self.monitor.get_dialogs()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = TelegramAIApp()


@click.group()
@click.version_option(version="1.0.0")
def cli():
    """Telegram AI Companion - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è Telegram"""
    setup_logging()


@cli.command()
def start():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    click.echo("ü§ñ –ó–∞–ø—É—Å–∫ Telegram AI Companion...")
    try:
        asyncio.run(app.start_monitoring())
    except KeyboardInterrupt:
        click.echo("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@cli.command()
@click.option('--user-id', '-u', type=int, required=True, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram')
@click.option('--message', '-m', required=True, help='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
def send(user_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async def _send():
        await app.send_message(user_id, message)
    
    asyncio.run(_send())


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    async def _status():
        status = await app.get_status()
        
        click.echo("\nüìä –°—Ç–∞—Ç—É—Å Telegram AI Companion:")
        click.echo(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status.get('monitoring') else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        click.echo(f"   Telegram: {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' if status.get('telegram_connected') else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}")
        click.echo(f"   –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤: {status.get('response_queue_size', 0)}")
        click.echo(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {status.get('active_chats', 0)}")
    
    asyncio.run(_status())


@cli.command()
def dialogs():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
    async def _dialogs():
        dialogs_list = await app.get_dialogs()
        
        if not dialogs_list:
            click.echo("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
            return
        
        click.echo(f"\nüí¨ –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs_list)}")
        click.echo("-" * 80)
        
        for dialog in dialogs_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            name = dialog.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            username = f"@{dialog['username']}" if dialog.get('username') else ""
            unread = dialog.get('unread_count', 0)
            last_msg = dialog.get('last_message', '')
            
            click.echo(f"üë§ {name} {username} (ID: {dialog['id']})")
            if unread > 0:
                click.echo(f"   üî¥ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread}")
            if last_msg:
                click.echo(f"   üí≠ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_msg[:50]}...")
            click.echo()
    
    asyncio.run(_dialogs())


@cli.command()
def config():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    click.echo("\n‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    click.echo(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {settings.telegram_phone}")
    click.echo(f"   ü§ñ OpenAI –º–æ–¥–µ–ª—å: {settings.openai_model}")
    click.echo(f"   üïê –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.monitor_interval} —Å–µ–∫")
    click.echo(f"   üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {settings.log_level}")
    click.echo(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
    
    click.echo(f"\nüë§ –ü–µ—Ä—Å–æ–Ω–∞–∂:")
    click.echo(f"   –ò–º—è: {character_settings.name}")
    click.echo(f"   –í–æ–∑—Ä–∞—Å—Ç: {character_settings.age}")
    click.echo(f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {character_settings.occupation}")
    click.echo(f"   –ì–æ—Ä–æ–¥: {character_settings.location}")
    click.echo(f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(character_settings.interests)}")


@cli.command()
def test():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    async def _test():
        click.echo("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            chats = db_manager.get_active_chats()
            click.echo(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (—á–∞—Ç–æ–≤: {len(chats)})")
        except Exception as e:
            click.echo(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –¢–µ—Å—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            monitor = MessageMonitor()
            if await monitor.telegram_client.initialize():
                if await monitor.telegram_client.connect():
                    click.echo("‚úÖ Telegram: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    await monitor.telegram_client.stop_monitoring()
                else:
                    click.echo("‚ùå Telegram: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            else:
                click.echo("‚ùå Telegram: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        except Exception as e:
            click.echo(f"‚ùå Telegram: {e}")
        
        # –¢–µ—Å—Ç OpenAI
        try:
            from src.core.response_generator import ResponseGenerator
            generator = ResponseGenerator()
            click.echo(f"‚úÖ OpenAI: –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–º–æ–¥–µ–ª—å: {settings.openai_model})")
        except Exception as e:
            click.echo(f"‚ùå OpenAI: {e}")
    
    asyncio.run(_test())


@cli.command()
@click.option('--chat-id', '-c', type=int, help='ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
@click.option('--limit', '-l', default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
def messages(chat_id: int, limit: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    if not chat_id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats = db_manager.get_active_chats()
        if not chats:
            click.echo("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            return
        
        click.echo(f"\nüí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(chats)}):")
        for chat in chats[:10]:
            name = chat.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = f"@{chat.username}" if chat.username else ""
            click.echo(f"   {chat.id}: {name} {username} (User ID: {chat.telegram_user_id})")
        
        click.echo(f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python -m src.cli.main messages -c <chat_id>")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    messages_list = db_manager.get_chat_messages(chat_id, limit)
    
    if not messages_list:
        click.echo(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
        return
    
    click.echo(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages_list)}):")
    click.echo("-" * 80)
    
    for msg in messages_list:
        sender = "ü§ñ AI" if msg.is_from_ai else "üë§ User"
        time_str = msg.created_at.strftime("%H:%M:%S")
        text = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
        click.echo(f"{time_str} {sender}: {text}")


if __name__ == "__main__":
    cli()