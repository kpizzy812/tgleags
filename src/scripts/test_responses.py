#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    from src.core.response_generator import ResponseGenerator
    from src.database.database import MessageBatch
    from src.database.models import Message
    from src.config.settings import character_settings
    from src.utils.helpers import setup_logging
    from loguru import logger
    from datetime import datetime
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


async def test_response_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–≤–æ–π –±–∏–æ–≥—Ä–∞—Ñ–∏–µ–π –°—Ç–∞—Å–∞"""
    setup_logging()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –±–∏–æ–≥—Ä–∞—Ñ–∏–µ–π –°—Ç–∞—Å–∞...")
    print(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_settings.name}, {character_settings.age} –ª–µ—Ç, {character_settings.occupation}")
    print("-" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        generator = ResponseGenerator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_scenarios = [
            {
                "name": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
                "messages": ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"],
                "expected": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
            },
            {
                "name": "–í–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ",
                "messages": ["–ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?"],
                "expected": "–†–∞—Å—Å–∫–∞–∑ –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ + –≤–æ–ø—Ä–æ—Å –æ –µ—ë —Ä–∞–±–æ—Ç–µ"
            },
            {
                "name": "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º",
                "messages": ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥?"],
                "expected": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
            },
            {
                "name": "–°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                "messages": ["–û–≥–æ!", "–ö—Ä—É—Ç–æ –∑–≤—É—á–∏—Ç!", "–ê —Ä–∏—Å–∫–æ–≤–æ?"],
                "expected": "–û—Ç–≤–µ—Ç –Ω–∞ –≤—Å—é —Å–µ—Ä–∏—é + –≤–æ–ø—Ä–æ—Å"
            },
            {
                "name": "–õ–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                "messages": ["–ê —Ç—ã –æ—Ç–∫—É–¥–∞ —Ä–æ–¥–æ–º?"],
                "expected": "–†–∞—Å—Å–∫–∞–∑ –æ –ì—Ä–µ—Ü–∏–∏ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º –æ–ø—ã—Ç–µ"
            },
            {
                "name": "–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
                "messages": ["–ê —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å?"],
                "expected": "–†–∞—Å—Å–∫–∞–∑ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\n{i}. üìù –¢–µ—Å—Ç: {scenario['name']}")
            print(f"   –í—Ö–æ–¥—è—â–µ–µ: {' | '.join(scenario['messages'])}")
            print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {scenario['expected']}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fake_messages = []
            for msg_text in scenario['messages']:
                fake_message = Message(
                    chat_id=999,  # –§–µ–π–∫–æ–≤—ã–π ID
                    text=msg_text,
                    is_from_ai=False,
                    created_at=datetime.utcnow()
                )
                fake_messages.append(fake_message)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            message_batch = MessageBatch(fake_messages)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            try:
                response = await generator.generate_response_for_batch(999, message_batch)
                
                if response:
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {response}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    analysis = []
                    if len(response.split('.')) <= 2:
                        analysis.append("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π")
                    else:
                        analysis.append("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
                    
                    if '?' in response:
                        analysis.append("‚úÖ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å")
                    else:
                        analysis.append("‚ö†Ô∏è –ù–µ—Ç –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
                    
                    if any(word in response.lower() for word in ['—Ç—Ä–µ–π–¥–∏–Ω–≥', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–∫—Ä–∏–ø—Ç']):
                        analysis.append("‚úÖ –£–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
                    
                    print(f"   üìä –ê–Ω–∞–ª–∏–∑: {' | '.join(analysis)}")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
            print("-" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        print(f"   –ò–º—è: {character_settings.name}")
        print(f"   –í–æ–∑—Ä–∞—Å—Ç: {character_settings.age}")
        print(f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {character_settings.occupation}")
        print(f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(character_settings.interests[:3])}...")
        
        print(f"\nüìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"   {character_settings.background_story[:100]}...")
        
        print(f"\nüíº –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã:")
        work_details = character_settings.work_details
        print(f"   –¢–∏–ø: {work_details.get('company_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"   –û–ø—ã—Ç: {work_details.get('career_start', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        
        print(f"\nüéØ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"   {character_settings.system_prompt[:200]}...")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üí° –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ - –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤...")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    await test_response_generation()


if __name__ == "__main__":
    asyncio.run(main())