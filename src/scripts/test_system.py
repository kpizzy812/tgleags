#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram AI Companion –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è
"""
import os
import sys
import subprocess
from pathlib import Path


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("   cp .env.example .env")
        return False
    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    return True


def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        load_dotenv()

        required_vars = [
            'TELEGRAM_API_ID',
            'TELEGRAM_API_HASH',
            'TELEGRAM_PHONE',
            'OPENAI_API_KEY'
        ]

        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            print(f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False

        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        return True

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'telethon',
        'openai',
        'loguru',
        'pydantic',
        'sqlalchemy',
        'click',
        'python-dotenv'
    ]

    missing_packages = []

    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install -r requirements.txt")
        return False

    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_simplified_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    required_dirs = [
        'src/core',
        'src/config',
        'src/database',
        'src/utils',
        'src/cli',
        'src/scripts'
    ]

    required_files = [
        'src/core/telegram_client.py',
        'src/core/response_generator.py',
        'src/core/message_monitor.py',
        'src/config/settings.py',
        'src/database/models.py',
        'src/database/database.py',
        'src/cli/main.py',
        'src/cli/chat_commands.py',
        'src/cli/stats_commands.py',
        'requirements.txt'
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    deprecated_items = [
        'src/analysis/',
        'src/utils/openai_helper.py',
        'CHECK_TEST.md',
        'CHECK_LIST.md'
    ]

    missing_items = []
    deprecated_found = []

    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_items.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_items.append(f"–§–∞–π–ª: {file_path}")

    for deprecated_item in deprecated_items:
        if os.path.exists(deprecated_item):
            deprecated_found.append(deprecated_item)

    if missing_items:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for item in missing_items:
            print(f"   {item}")
        return False

    if deprecated_found:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å):")
        for item in deprecated_found:
            print(f"   {item}")

    print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def check_database_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db_path = "./telegram_ai.db"

        if not os.path.exists(db_path):
            print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]

        expected_tables = ['chats', 'messages', 'person_facts']
        deprecated_tables = ['chat_contexts', 'dialogue_analytics']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        missing_tables = [t for t in expected_tables if t not in tables]
        deprecated_present = [t for t in deprecated_tables if t in tables]

        conn.close()

        if missing_tables:
            print(f"‚ùå –ë–î: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: python src/scripts/migrate_database.py")
            return False

        if deprecated_present:
            print(f"‚ö†Ô∏è –ë–î: –Ω–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(deprecated_present)}")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è: python src/scripts/migrate_database.py")

        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ({len(tables)} —Ç–∞–±–ª–∏—Ü)")
        return True

    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


def check_simplified_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        sys.path.insert(0, '.')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from src.config.settings import settings, character_settings
        from src.database.database import db_manager
        from src.core.telegram_client import TelegramAIClient
        from src.core.response_generator import ResponseGenerator
        from src.core.message_monitor import MessageMonitor
        from src.cli.main import cli

        print("‚úÖ –í—Å–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –º–æ–¥—É–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        deprecated_modules = [
            'src.analysis.conversation_analyzer',
            'src.analysis.financial_analyzer',
            'src.utils.openai_helper'
        ]

        deprecated_found = []
        for module in deprecated_modules:
            try:
                __import__(module)
                deprecated_found.append(module)
            except ImportError:
                pass  # –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - –º–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω

        if deprecated_found:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–æ–¥—É–ª–∏: {', '.join(deprecated_found)}")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É src/analysis/")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        return False


def check_character_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        from src.config.settings import character_settings

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        checks = [
            ('–ò–º—è', character_settings.name, lambda x: bool(x and len(x) > 0)),
            ('–í–æ–∑—Ä–∞—Å—Ç', character_settings.age, lambda x: isinstance(x, int) and 20 <= x <= 40),
            ('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', character_settings.occupation, lambda x: '–∫—Ä–∏–ø—Ç–æ' in x.lower() or '—Ç—Ä–µ–π–¥' in x.lower()),
            ('–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç', character_settings.system_prompt, lambda x: len(x) > 200),
            ('–¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–º–æ—â–∏', character_settings.help_offer_triggers, lambda x: len(x) >= 5)
        ]

        all_good = True
        for name, value, check_func in checks:
            if check_func(value):
                print(f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂.{name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂.{name}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                all_good = False

        return all_good

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return False


def check_cli_functionality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CLI"""
    try:
        from src.cli.main import cli
        from src.cli.chat_commands import chat_commands
        from src.cli.stats_commands import stats_commands

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        expected_commands = [
            'start', 'status', 'config', 'test', 'queue',  # main
            'send', 'dialogs', 'messages',  # chat
            'stats', 'facts', 'opportunities'  # stats
        ]

        print(f"‚úÖ CLI: –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∫–æ–º–∞–Ω–¥: {len(expected_commands)}")
        return True

    except Exception as e:
        print(f"‚ùå CLI: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Telegram AI Companion...")
    print("=" * 70)

    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", check_simplified_project_structure),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        (".env —Ñ–∞–π–ª", check_env_file),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_variables),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database_migration),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", check_simplified_imports),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", check_character_settings),
        ("CLI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", check_cli_functionality)
    ]

    passed = 0
    total = len(checks)

    for name, check_func in checks:
        print(f"\nüìã {name}:")
        if check_func():
            passed += 1
        else:
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")

    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. python src/scripts/test_system.py      # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("2. python -m src.cli.main test            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        print("3. python -m src.cli.main start           # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        print("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
    else:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")

        print("\nüöÄ –ë—ã—Å—Ç—Ä–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:")
        print("1. python src/scripts/migrate_database.py  # –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î")
        print("2. rm -rf src/analysis/                    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω–µ–Ω–∏—è")
        print("3. python check_setup.py                   # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")


if __name__ == "__main__":
    main()