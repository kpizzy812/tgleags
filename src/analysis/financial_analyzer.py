"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞
"""
import json
import re
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from openai import OpenAI
from loguru import logger

from ..config.settings import settings


class FinancialAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É"""
    
    def __init__(self):
        self.openai_client = OpenAI(api_key=settings.openai_api_key)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∂–∞–ª–æ–±
        self.complaint_patterns = {
            "salary_low": [
                r"–º–∞–ª–æ –ø–ª–∞—Ç\w+", r"–º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", r"–∫–æ–ø–µ–π–∫–∏ –ø–ª–∞—Ç\w+",
                r"–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", r"–Ω–µ—Ç –¥–µ–Ω–µ–≥", r"–±–µ–¥–Ω–æ –∂–∏–≤\w+"
            ],
            "work_dissatisfaction": [
                r"—Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞", r"–Ω–∞–¥–æ–µ–ª–∞ —Ä–∞–±–æ—Ç–∞", r"—É—Å—Ç–∞–ª–∞ –æ—Ç —Ä–∞–±–æ—Ç\w+",
                r"–Ω–∞—á–∞–ª—å–Ω–∏–∫ –¥–æ—Å—Ç–∞–ª", r"—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è"
            ],
            "expensive_desires": [
                r"—Ö–æ—á—É –º–∞—à–∏–Ω—É", r"–º–µ—á—Ç–∞—é –æ –º–∞—à–∏–Ω\w+", r"—Ö–æ—á—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å",
                r"–º–µ—á—Ç–∞—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å", r"—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É", r"–Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞"
            ]
        }
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self.positive_patterns = [
            r"—Ö–æ—Ä–æ—à–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é", r"–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", r"–Ω–µ –∂–∞–ª—É—é—Å—å",
            r"–≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", r"–¥–æ–≤–æ–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–æ–π"
        ]
    
    def analyze_financial_potential(self, conversation_text: str, new_messages: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—ã"""
        try:
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            full_text = f"{conversation_text}\n{new_messages}".lower()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            complaint_scores = self._count_complaint_patterns(full_text)
            desire_signals = self._extract_expensive_desires(full_text)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            ai_analysis = self._get_ai_financial_analysis(conversation_text, new_messages)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {
                "complaint_scores": complaint_scores,
                "expensive_desires": desire_signals,
                "ai_analysis": ai_analysis,
                "overall_score": self._calculate_overall_score(complaint_scores, ai_analysis),
                "readiness_level": self._determine_readiness_level(complaint_scores, ai_analysis),
                "analyzed_at": datetime.utcnow().isoformat()
            }
            
            logger.info(f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: {result['overall_score']}/10, "
                       f"–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {result['readiness_level']}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._get_fallback_financial_analysis()
    
    def _count_complaint_patterns(self, text: str) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∂–∞–ª–æ–±"""
        scores = {}
        
        for category, patterns in self.complaint_patterns.items():
            count = 0
            for pattern in patterns:
                count += len(re.findall(pattern, text))
            scores[category] = count
        
        return scores
    
    def _extract_expensive_desires(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–∏—Ö –∂–µ–ª–∞–Ω–∏–π"""
        desires = []
        
        desire_keywords = {
            "–º–∞—à–∏–Ω–∞": ["–º–∞—à–∏–Ω", "–∞–≤—Ç–æ", "bmw", "–º–µ—Ä—Å–µ–¥–µ—Å", "–ø—Ä–∞–≤–∞"],
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ["–ø—É—Ç–µ—à–µ—Å—Ç–≤", "–æ—Ç–ø—É—Å–∫", "–º–∞–ª—å–¥–∏–≤", "—Ç—É—Ä—Ü–∏", "–µ–≤—Ä–æ–ø"],
            "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": ["–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º", "—Ä–µ–º–æ–Ω—Ç", "–∏–ø–æ—Ç–µ–∫"],
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–∫—É—Ä—Å—ã", "—É—á–µ–±–∞", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"],
            "–∫—Ä–∞—Å–æ—Ç–∞": ["–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "–ø—Ä–æ—Ü–µ–¥—É—Ä", "—Å–∞–ª–æ–Ω", "–ø–ª–∞—Å—Ç–∏–∫"]
        }
        
        for category, keywords in desire_keywords.items():
            if any(keyword in text for keyword in keywords):
                desires.append(category)
        
        return desires

    def _get_ai_financial_analysis(self, history: str, new_messages: str) -> Dict:
        """–ò–ò –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–≤—É—à–∫–∏ –ø–æ –¥–∏–∞–ª–æ–≥—É.

    –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
    {history}

    –ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:  
    {new_messages}

    –í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON –ë–ï–ó –û–ë–ï–†–¢–ö–ò:
    {{
        "financial_stress_level": 1-10,
        "job_satisfaction": 1-10,
        "openness_to_opportunities": 1-10,
        "money_complaints_detected": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∂–∞–ª–æ–±—ã"],
        "expensive_dreams_mentioned": ["–º–µ—á—Ç—ã –æ –¥–æ—Ä–æ–≥–∏—Ö –≤–µ—â–∞—Ö"],
        "work_problems": ["–ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ"],
        "potential_motivation": "—á—Ç–æ –º–æ–∂–µ—Ç –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ",
        "readiness_indicators": ["–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"],
        "red_flags": ["–Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã"]
    }}

    –ò—â–∏:
    - –ñ–∞–ª–æ–±—ã –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É, –Ω–µ—Ö–≤–∞—Ç–∫—É –¥–µ–Ω–µ–≥
    - –ñ–µ–ª–∞–Ω–∏—è –¥–æ—Ä–æ–≥–∏—Ö –≤–µ—â–µ–π (–º–∞—à–∏–Ω—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–≤–∞—Ä—Ç–∏—Ä—ã)
    - –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ–º
    - –ú–µ—á—Ç—ã –æ –ª—É—á—à–µ–π –∂–∏–∑–Ω–∏
    - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É"""

            response = self.openai_client.chat.completions.create(
                model=settings.openai_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=400
            )

            content = response.choices[0].message.content.strip()
            if not content:
                logger.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                return self._get_default_financial_analysis()

            # –û—á–∏—â–∞–µ–º –æ—Ç markdown –æ–±–µ—Ä—Ç–æ–∫
            content = self._clean_json_response(content)

            if not content:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                return self._get_default_financial_analysis()

            try:
                return json.loads(content)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: {content[:100]}...")
                return self._get_default_financial_analysis()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤: {e}")
            return {
                "financial_stress_level": 5,
                "job_satisfaction": 5,
                "openness_to_opportunities": 5,
                "money_complaints_detected": [],
                "expensive_dreams_mentioned": [],
                "work_problems": [],
                "potential_motivation": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "readiness_indicators": [],
                "red_flags": []
            }

    def _clean_json_response(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI –æ—Ç markdown –æ–±–µ—Ä—Ç–æ–∫"""
        # –£–±–∏—Ä–∞–µ–º markdown –æ–±–µ—Ä—Ç–∫–∏
        content = content.replace('```json', '').replace('```', '')

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        content = content.strip()

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if not content.startswith('{'):
            return ""

        return content

    def _get_default_financial_analysis(self) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        return {
            "financial_stress_level": 5,
            "job_satisfaction": 5,
            "openness_to_opportunities": 5,
            "money_complaints_detected": [],
            "expensive_dreams_mentioned": [],
            "work_problems": [],
            "potential_motivation": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
            "readiness_indicators": [],
            "red_flags": []
        }

    def _calculate_overall_score(self, complaint_scores: Dict, ai_analysis: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∞ (1-10)"""
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
        pattern_score = sum(v for v in complaint_scores.values() if v is not None) * 2

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç None –∏–∑ OpenAI
        ai_stress = ai_analysis.get("financial_stress_level") or 5
        ai_openness = ai_analysis.get("openness_to_opportunities") or 5

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
        pattern_score = int(pattern_score)
        ai_stress = int(ai_stress)
        ai_openness = int(ai_openness)

        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
        combined_score = min(10, (pattern_score + ai_stress + ai_openness) // 3)

        return max(1, combined_score)

    def _determine_readiness_level(self, complaint_scores: Dict, ai_analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –≤ complaint_scores
        total_complaints = sum(v for v in complaint_scores.values() if v is not None)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∏–∑ OpenAI - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
        stress_level = ai_analysis.get("financial_stress_level") or 5
        openness = ai_analysis.get("openness_to_opportunities") or 5

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å—ë int
        total_complaints = int(total_complaints)
        stress_level = int(stress_level)
        openness = int(openness)

        if total_complaints >= 3 and stress_level >= 7 and openness >= 7:
            return "–≤—ã—Å–æ–∫–∞—è"
        elif total_complaints >= 2 and stress_level >= 5 and openness >= 6:
            return "—Å—Ä–µ–¥–Ω—è—è"
        elif total_complaints >= 1 or stress_level >= 6:
            return "–Ω–∏–∑–∫–∞—è"
        else:
            return "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    def _get_fallback_financial_analysis(self) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "complaint_scores": {"salary_low": 0, "work_dissatisfaction": 0, "expensive_desires": 0},
            "expensive_desires": [],
            "ai_analysis": {
                "financial_stress_level": 5,
                "job_satisfaction": 5,
                "openness_to_opportunities": 5,
                "money_complaints_detected": [],
                "expensive_dreams_mentioned": [],
                "work_problems": [],
                "potential_motivation": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "readiness_indicators": [],
                "red_flags": []
            },
            "overall_score": 5,
            "readiness_level": "–Ω–∏–∑–∫–∞—è",
            "analyzed_at": datetime.utcnow().isoformat()
        }
    
    def generate_financial_response_strategy(self, financial_analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        readiness = financial_analysis.get("readiness_level", "–Ω–∏–∑–∫–∞—è")
        complaints = financial_analysis.get("complaint_scores", {})
        desires = financial_analysis.get("expensive_desires", [])
        
        if readiness == "–≤—ã—Å–æ–∫–∞—è":
            return """–í–´–°–û–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:
- –ê–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è –µ—ë —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π
- –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ
- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
        
        elif readiness == "—Å—Ä–µ–¥–Ω—è—è":
            return """–°–†–ï–î–ù–Ø–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:
- –ú—è–≥–∫–æ –≤—ã—è–≤–ª—è–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –µ—ë —Å–∏—Ç—É–∞—Ü–∏–∏
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ —Å–≤–æ–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —É—Å–ø–µ—Ö–µ
- –°–æ–∑–¥–∞–≤–∞–π –±–∞–∑—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        elif readiness == "–Ω–∏–∑–∫–∞—è":
            return """–ù–ò–ó–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:
- –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ–º—ã
- –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ–±—â–µ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
- –ò—â–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–æ–π
- –†–∞–∑–≤–∏–≤–∞–π –¥–æ–≤–µ—Ä–∏–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å"""
        
        else:
            return """–ì–û–¢–û–í–ù–û–°–¢–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢:
- –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ–±—â–µ–º –æ–±—â–µ–Ω–∏–∏
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –¥–µ–Ω—å–≥–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
- –†–∞–∑–≤–∏–≤–∞–π –ª–∏—á–Ω—ã–µ —Ç–µ–º—ã
- –ò—â–∏ –¥—Ä—É–≥–∏–µ —Ç–æ—á–∫–∏ —Å–æ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è"""
    
    def should_make_work_offer(self, financial_analysis: Dict, dialogue_stage: str) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã"""
        readiness = financial_analysis.get("readiness_level", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        overall_score = financial_analysis.get("overall_score", 0)
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (dialogue_stage == "proposal" and 
            readiness in ["–≤—ã—Å–æ–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è"] and 
            overall_score >= 6):
            
            return True, f"–ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é: {readiness} –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä {overall_score}/10"
        
        elif readiness == "–≤—ã—Å–æ–∫–∞—è" and overall_score >= 8:
            return True, f"–°—Ä–æ—á–Ω–æ –≥–æ—Ç–æ–≤–∞: –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
        
        else:
            return False, f"–ù–µ –≥–æ—Ç–æ–≤–∞: {readiness} –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä {overall_score}/10"