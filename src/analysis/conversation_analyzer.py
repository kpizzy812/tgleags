"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
"""
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from loguru import logger

from .dialogue_stage_analyzer import DialogueStageAnalyzer
from .financial_analyzer import FinancialAnalyzer
from .trauma_analyzer import TraumaAnalyzer
from ..database.database import db_manager, MessageBatch


class ConversationAnalyzer:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self):
        self.stage_analyzer = DialogueStageAnalyzer()
        self.financial_analyzer = FinancialAnalyzer()
        self.trauma_analyzer = TraumaAnalyzer()
    
    def analyze_conversation_context(self, chat_id: int, message_batch: MessageBatch) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=100)
            new_messages_text = message_batch.total_text
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            stage_analysis = self.stage_analyzer.analyze_current_stage(chat_id, message_batch)
            financial_analysis = self.financial_analyzer.analyze_financial_potential(
                conversation_history, new_messages_text
            )
            emotional_analysis = self.trauma_analyzer.analyze_emotional_context(
                conversation_history, new_messages_text
            )
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            comprehensive_analysis = {
                "chat_id": chat_id,
                "analyzed_at": datetime.utcnow().isoformat(),
                "message_batch_info": {
                    "message_count": len(message_batch.messages),
                    "time_span": message_batch.get_context_summary()
                },
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
                "stage_analysis": stage_analysis,
                "financial_analysis": financial_analysis,
                "emotional_analysis": emotional_analysis,
                
                # –°–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                "overall_metrics": self._calculate_overall_metrics(
                    stage_analysis, financial_analysis, emotional_analysis
                ),
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                "strategy_recommendations": self._generate_strategy_recommendations(
                    stage_analysis, financial_analysis, emotional_analysis
                )
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            self._log_key_insights(comprehensive_analysis)
            
            return comprehensive_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._get_fallback_analysis(chat_id, message_batch)
    
    def _calculate_overall_metrics(self, stage_analysis: Dict, 
                                 financial_analysis: Dict, 
                                 emotional_analysis: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–ª–æ–≥–∞
        stage_progress = stage_analysis.get("stage_completion_percentage", 0)
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        financial_score = financial_analysis.get("overall_score", 0)
        readiness_level = financial_analysis.get("readiness_level", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å
        trust_level = emotional_analysis.get("trust_level", 0)
        emotional_connection = emotional_analysis.get("emotional_connection", 0)
        
        # –û–±—â–∏–π —Å–∫–æ—Ä –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-100)
        overall_prospect_score = self._calculate_prospect_score(
            stage_progress, financial_score, trust_level, dialogue_day
        )
        
        return {
            "dialogue_day": dialogue_day,
            "stage_progress": stage_progress,
            "financial_potential": financial_score,
            "trust_level": trust_level,  
            "emotional_connection": emotional_connection,
            "overall_prospect_score": overall_prospect_score,
            "readiness_assessment": self._assess_overall_readiness(
                stage_analysis, financial_analysis, emotional_analysis
            )
        }
    
    def _calculate_prospect_score(self, stage_progress: int, financial_score: int, 
                                trust_level: int, dialogue_day: int) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        weights = {
            "stage_progress": 0.3,
            "financial_potential": 0.4,  # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            "trust_level": 0.2,
            "time_factor": 0.1
        }
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ 0-100
        normalized_financial = (financial_score / 10) * 100
        normalized_trust = (trust_level / 10) * 100
        time_factor = min(100, (dialogue_day / 7) * 100)  # 7 –¥–Ω–µ–π = 100%
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
        weighted_score = (
            stage_progress * weights["stage_progress"] +
            normalized_financial * weights["financial_potential"] +
            normalized_trust * weights["trust_level"] +
            time_factor * weights["time_factor"]
        )
        
        return int(min(100, max(0, weighted_score)))
    
    def _assess_overall_readiness(self, stage_analysis: Dict, 
                                financial_analysis: Dict, 
                                emotional_analysis: Dict) -> Dict:
        """–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º"""
        
        current_stage = stage_analysis.get("current_stage", "initiation")
        financial_readiness = financial_analysis.get("readiness_level", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        trust_level = emotional_analysis.get("trust_level", 0)
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã
        work_offer_ready = (
            current_stage in ["diagnosis", "proposal"] and
            financial_readiness in ["–≤—ã—Å–æ–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è"] and
            trust_level >= 6
        )
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏—Å—Ç–æ—Ä–∏–π
        story_sharing_ready = (
            trust_level >= 7 and
            emotional_analysis.get("emotional_analysis", {}).get("vulnerability_shown", 0) >= 6
        )
        
        # –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
        dialogue_risk = self._assess_dialogue_risk(stage_analysis, financial_analysis)
        
        return {
            "ready_for_work_offer": work_offer_ready,
            "ready_for_story_sharing": story_sharing_ready,
            "dialogue_risk_level": dialogue_risk,
            "next_recommended_action": self._get_next_action_recommendation(
                current_stage, financial_readiness, trust_level, work_offer_ready
            )
        }
    
    def _assess_dialogue_risk(self, stage_analysis: Dict, financial_analysis: Dict) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞"""
        
        crypto_reaction = stage_analysis.get("crypto_reaction", "unknown")
        financial_signals = stage_analysis.get("financial_signals_count", 0)
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        if crypto_reaction == "negative":
            return "–≤—ã—Å–æ–∫–∏–π - –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ"
        
        if dialogue_day >= 5 and financial_signals == 0:
            return "–≤—ã—Å–æ–∫–∏–π - –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ 5+ –¥–µ–Ω—å"
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫  
        if dialogue_day >= 3 and financial_signals <= 1:
            return "—Å—Ä–µ–¥–Ω–∏–π - –º–∞–ª–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        
        # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
        if financial_signals >= 2:
            return "–Ω–∏–∑–∫–∏–π - —Ö–æ—Ä–æ—à–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
        
        return "—Å—Ä–µ–¥–Ω–∏–π - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    
    def _get_next_action_recommendation(self, current_stage: str, financial_readiness: str, 
                                      trust_level: int, work_offer_ready: bool) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        
        if work_offer_ready:
            return "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É/–ø–æ–º–æ—â—å –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ"
        
        if current_stage == "diagnosis" and trust_level >= 7:
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º –≤ –±–æ–ª—å–Ω–∏—Ü–µ"
        
        if current_stage == "retention" and financial_readiness == "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            return "–ê–∫—Ç–∏–≤–Ω–µ–µ –≤—ã—è–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        
        if current_stage == "initiation":
            return "–£–∑–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥"
        
        if trust_level < 6:
            return "–†–∞–∑–≤–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –∏ –¥–æ–≤–µ—Ä–∏–µ"
        
        return "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
    
    def _generate_strategy_recommendations(self, stage_analysis: Dict, 
                                         financial_analysis: Dict, 
                                         emotional_analysis: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç—Ç–∞–ø–∞
        stage_strategy = self.stage_analyzer.get_stage_specific_instructions(stage_analysis)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        financial_strategy = self.financial_analyzer.generate_financial_response_strategy(financial_analysis)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        story_recommendations = emotional_analysis.get("story_recommendations", {})
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        special_scenarios = self._identify_special_scenarios(
            stage_analysis, financial_analysis, emotional_analysis
        )
        
        return {
            "stage_strategy": stage_strategy,
            "financial_strategy": financial_strategy,
            "story_sharing_recommendations": story_recommendations,
            "special_scenarios": special_scenarios,
            "priority_focus": self._determine_priority_focus(
                stage_analysis, financial_analysis, emotional_analysis
            )
        }
    
    def _identify_special_scenarios(self, stage_analysis: Dict, 
                                   financial_analysis: Dict, 
                                   emotional_analysis: Dict) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        scenarios = []
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        trust_level = emotional_analysis.get("trust_level", 0)
        
        if dialogue_day >= 3 and trust_level >= 6:
            scenarios.append("father_hospital_scenario")
        
        # –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        financial_readiness = financial_analysis.get("readiness_level", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        if financial_readiness == "–≤—ã—Å–æ–∫–∞—è":
            scenarios.append("active_work_proposal")
        
        # –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
        crypto_reaction = stage_analysis.get("crypto_reaction", "unknown")
        if crypto_reaction == "negative":
            scenarios.append("dialogue_termination_risk")
        
        return scenarios
    
    def _determine_priority_focus(self, stage_analysis: Dict, 
                                financial_analysis: Dict, 
                                emotional_analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        crypto_reaction = stage_analysis.get("crypto_reaction", "unknown")
        if crypto_reaction == "negative":
            return "damage_control"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        financial_readiness = financial_analysis.get("readiness_level", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        if financial_readiness == "–≤—ã—Å–æ–∫–∞—è":
            return "work_proposal"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
        trust_level = emotional_analysis.get("trust_level", 0)
        if trust_level >= 8:
            return "deep_emotional_connection"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        financial_score = financial_analysis.get("overall_score", 0)
        if financial_score <= 3:
            return "financial_signals_detection"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_stage = stage_analysis.get("current_stage", "initiation")
        return f"stage_progression_{current_stage}"
    
    def _log_key_insights(self, analysis: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        metrics = analysis.get("overall_metrics", {})
        
        logger.info(f"üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"   üìä –û–±—â–∏–π —Å–∫–æ—Ä: {metrics.get('overall_prospect_score', 0)}/100")
        logger.info(f"   üìà –≠—Ç–∞–ø: {analysis['stage_analysis'].get('current_stage', 'unknown')}")
        logger.info(f"   üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {metrics.get('financial_potential', 0)}/10")
        logger.info(f"   ü§ù –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {metrics.get('trust_level', 0)}/10")
        logger.info(f"   üé¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['strategy_recommendations'].get('priority_focus', 'unknown')}")
    
    def _get_fallback_analysis(self, chat_id: int, message_batch: MessageBatch) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "chat_id": chat_id,
            "analyzed_at": datetime.utcnow().isoformat(),
            "message_batch_info": {
                "message_count": len(message_batch.messages),
                "time_span": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"
            },
            "stage_analysis": {"current_stage": "initiation", "dialogue_day": 1},
            "financial_analysis": {"overall_score": 5, "readiness_level": "–Ω–∏–∑–∫–∞—è"},
            "emotional_analysis": {"trust_level": 5, "emotional_connection": 3},
            "overall_metrics": {
                "overall_prospect_score": 30,
                "readiness_assessment": {
                    "ready_for_work_offer": False,
                    "next_recommended_action": "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
                }
            },
            "strategy_recommendations": {
                "priority_focus": "stage_progression_initiation"
            }
        }