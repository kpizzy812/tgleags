"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–Ω—ã–π
"""
import asyncio
import random
from typing import Optional
from datetime import datetime
from openai import OpenAI
from loguru import logger

from ..config.settings import settings, character_settings
from ..database.database import db_manager, MessageBatch
from ..utils.helpers import add_random_typo


class ResponseGenerator:
    """–ü—Ä–æ—Å—Ç–æ–π —á–µ–ª–æ–≤–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤"""

    def __init__(self):
        try:
            self.openai_client = OpenAI(
                api_key=settings.openai_api_key,
                timeout=60.0
            )
            self.character = character_settings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    async def generate_response_for_batch(self, chat_id: int, message_batch: MessageBatch) -> Optional[str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–∞—è –∏ —á–µ–ª–æ–≤–µ—á–Ω–∞—è"""
        try:
            logger.info(f"üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {message_batch.get_context_summary()}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=20)
            new_messages = message_batch.total_text

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            if self._should_terminate_dialogue(new_messages):
                return self._get_termination_response()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–æ–≤
            response = await self._generate_natural_response(conversation_history, new_messages, chat_id)

            if not response:
                return self._get_simple_fallback(new_messages, chat_id)

            # –ü—Ä–æ—Å—Ç—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            response = self._make_more_human(response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            self._save_simple_facts(chat_id, new_messages)

            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç: {response[:50]}...")
            return response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_simple_fallback(message_batch.total_text, chat_id)

    def _should_terminate_dialogue(self, message_text: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–æ"""
        negative_crypto = [
            "–∫—Ä–∏–ø—Ç–∞ —ç—Ç–æ —Ä–∞–∑–≤–æ–¥", "–Ω–µ –≤–µ—Ä—é –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "—ç—Ç–æ –ø–∏—Ä–∞–º–∏–¥–∞",
            "–∫—Ä–∏–ø—Ç–∞ —Ñ–∏–∫—Ü–∏—è", "–Ω–µ –¥–æ–≤–µ—Ä—è—é –∫—Ä–∏–ø—Ç–µ", "—ç—Ç–æ –æ–±–º–∞–Ω"
        ]

        message_lower = message_text.lower()
        return any(phrase in message_lower for phrase in negative_crypto)

    def _get_termination_response(self) -> str:
        """–í–µ–∂–ª–∏–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        responses = [
            "–ü–æ–Ω—è—Ç–Ω–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë) –£–¥–∞—á–∏ —Ç–µ–±–µ!",
            "–Ø—Å–Ω–æ. –ß—Ç–æ –∂, —É–¥–∞—á–∏ –≤ –∂–∏–∑–Ω–∏!",
            "–ü–æ–Ω–∏–º–∞—é. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!"
        ]
        return random.choice(responses)

    async def _generate_natural_response(self, history: str, new_messages: str, chat_id: int) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""

        # –ß–ï–õ–û–í–ï–ß–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
        system_prompt = f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç, –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å –∏–∑ –ú–æ—Å–∫–≤—ã. –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.

–û –¢–ï–ë–ï:
- –ó–∞–Ω–∏–º–∞–µ—à—å—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É–∂–µ 6 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Å–µ–±—è
- –†–æ–¥–∏–ª—Å—è –≤ –ì—Ä–µ—Ü–∏–∏, –≤ –¥–µ—Ç—Å—Ç–≤–µ –º–Ω–æ–≥–æ –ø–µ—Ä–µ–µ–∑–∂–∞–ª–∏, —É—á–∏–ª—Å—è –≤ –ú–ì–£ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º
- –†–æ–¥–∏—Ç–µ–ª–∏: –æ—Ç–µ—Ü –≤ –¢—É—Ä—Ü–∏–∏, –º–∞–º–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏
- –†–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∞–ª—å–ø–∏–Ω–∏—Å—Ç–æ–º
- –û–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å - –ª—é–±–∏—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —É–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞
- –í –∫—É—Ä—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –º–æ–¥—ã, –±—Ä–µ–Ω–¥–æ–≤ (–∑–Ω–∞–µ—à—å —á—Ç–æ —Å—Ç–æ–Ω–∏–∫ = Stone Island, —Å–Ω–∏–∫ = –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Ç–¥)

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
- –ë—É–¥—å –∂–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
- –†–µ–∞–≥–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: "–æ–≥–æ", "–±–ª–∏–Ω", "–∂–µ—Å—Ç—å", "–∫—Ä—É—Ç–æ"
- –ü—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ—ë –∂–∏–∑–Ω–∏
- –ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Ä–µ—á—å - –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ

–ö–ê–ö –ó–ê–î–ê–í–ê–¢–¨ –í–û–ü–†–û–°–´ (–í–ê–ñ–ù–û!):
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —É–≥–ª—É–±–ª—è–π—Å—è –≤ –¥–µ—Ç–∞–ª–∏:
- "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
- "–ß—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?"
- "–í –∑–∞–ª —Ö–æ–¥–∏—à—å –∏–ª–∏ –¥–æ–º–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?"
- "–î–∞–≤–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
- "–ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?"

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –∏–∑–±–µ–≥–∞–π —Ä–æ–±–æ—Ç-–≤–æ–ø—Ä–æ—Å—ã:
- "–ß—Ç–æ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è - —Å–ø–æ—Ä—Ç –∏–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ?"
- "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏ —Å–∞–º–æ–µ –ª—é–±–∏–º–æ–µ?"
- "–ß–µ–º –µ—â–µ —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"

–ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ï –†–ê–ó–í–ò–¢–ò–ï:
- –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã: —Ä–∞–±–æ—Ç–∞, —Ö–æ–±–±–∏, –ø–ª–∞–Ω—ã
- –ï—Å–ª–∏ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –¥–µ–Ω—å–≥–∏/—Ä–∞–±–æ—Ç—É - –ø–æ–Ω–∏–º–∞—é—â–µ –æ—Ç–≤–µ—á–∞–π
- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ - —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ —Ç—Ä–µ–π–¥–∏–Ω–≥
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ –µ–π –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ - –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–æ—á—å

–ü–†–ò–ú–ï–†–´ –¢–í–û–ò–• –û–¢–í–ï–¢–û–í:
"–ö—Ä—É—Ç–æ! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å. –ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
"–ü–æ–Ω–∏–º–∞—é, —Å–∞–º –∏–Ω–æ–≥–¥–∞ —É—Å—Ç–∞—é. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
"–û–≥–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?"
"–û, —Å—Ç–æ–Ω–∏–∫ –∫—Ä—É—Ç–æ–π! –°–∞–º –∏–Ω–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—é. –î–∞–≤–Ω–æ –Ω–æ—Å–∏—à—å?"

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π –ø–∞—Ä–µ–Ω—å, –ù–ï –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–ª–∏ –±–æ—Ç. –ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Ä–µ—á—å - –Ω–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å."""

        user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ü–ï–†–ï–ü–ò–°–ö–ê:
{history}

–û–ù–ê –ù–ê–ü–ò–°–ê–õ–ê:
{new_messages}

–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ –°—Ç–∞—Å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π):"""

        # Retry –ª–æ–≥–∏–∫–∞
        for attempt in range(3):
            try:
                response = self.openai_client.chat.completions.create(
                    model=settings.openai_model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.5,   # –ï—â–µ –Ω–∏–∂–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    max_tokens=150,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                    timeout=60
                )

                return response.choices[0].message.content.strip()

            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == 2:
                    return None
                await asyncio.sleep(2 ** attempt)

        return None

    def _make_more_human(self, response: str) -> str:
        """–î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º - –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""

        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—É—é —Ä–æ–±–æ—Ç–∏—á–Ω–æ—Å—Ç—å, –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        response = response.replace("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
        response = response.replace("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ")
        response = response.replace("—Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "")
        response = response.replace("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é", "–ù–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ")
        response = response.replace("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ", "")

        # –ù–ï —É–±–∏—Ä–∞–µ–º:
        # - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–∫–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º, —á—Ç–æ —Ä–∏—Å—É–µ—à—å, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å)
        # - –ó–Ω–∞–Ω–∏—è –æ –±—Ä–µ–Ω–¥–∞—Ö, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
        # - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        if any(word in response.lower() for word in ["–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ"]):
            if random.random() < 0.3:
                response += ")"

        # –°–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ (3% —à–∞–Ω—Å, –µ—â–µ –º–µ–Ω—å—à–µ)
        if len(response) > 20 and random.random() < 0.03:
            response = add_random_typo(response)

        # –ù–ï —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        has_good_question = any(word in response.lower() for word in [
            "–∫–∞–∫–∏–º", "—á—Ç–æ —Ä–∏—Å—É", "—á—Ç–æ –æ–±—ã—á–Ω–æ", "–≥–¥–µ —Ä–∞–±–æ—Ç–∞", "–¥–∞–≤–Ω–æ", "–∫–∞–∫ –¥–æ–ª–≥–æ"
        ])

        if not has_good_question:
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            sentences = response.split('. ')
            if len(sentences) > 2:
                response = '. '.join(sentences[:2])
                if '?' not in response:
                    response += ". –ê —É —Ç–µ–±—è –∫–∞–∫?"

        return response.strip()

    def _save_simple_facts(self, chat_id: int, message_text: str):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            message_lower = message_text.lower()

            # –†–∞–±–æ—Ç–∞
            work_keywords = ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞ —É –º–µ–Ω—è", "—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—è –º–µ–Ω–µ–¥–∂–µ—Ä", "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å"]
            for keyword in work_keywords:
                if keyword in message_lower:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    if "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 0.8)
                    elif "–º–µ–Ω–µ–¥–∂–µ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–º–µ–Ω–µ–¥–∂–µ—Ä", 0.8)
                    elif "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–¥–∏–∑–∞–π–Ω–µ—Ä –æ–¥–µ–∂–¥—ã", 0.9)
                    break

            # –•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            hobby_patterns = {
                "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "–∫–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
                "–¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã": "–¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã",
                "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç"
            }

            for pattern, hobby in hobby_patterns.items():
                if pattern in message_lower:
                    db_manager.save_person_fact(chat_id, "hobby", hobby, 0.8)

            # –õ—é–±–∏–º—ã–µ –±—Ä–µ–Ω–¥—ã
            brand_patterns = {
                "kenzo": "KENZO",
                "—Å—Ç–æ–Ω–∏–∫": "Stone Island",
                "stone island": "Stone Island",
                "–Ω–∞–π–∫": "Nike",
                "–∞–¥–∏–¥–∞—Å": "Adidas"
            }

            for pattern, brand in brand_patterns.items():
                if pattern in message_lower:
                    db_manager.save_person_fact(chat_id, "favorite_brand", brand, 0.9)

            # –ñ–∞–ª–æ–±—ã –Ω–∞ –¥–µ–Ω—å–≥–∏
            money_complaints = ["–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è"]
            for complaint in money_complaints:
                if complaint in message_lower:
                    db_manager.save_person_fact(chat_id, "financial_complaint", complaint, 0.9)
                    break

            # –î–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã
            dreams = ["—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É"]
            for dream in dreams:
                if dream in message_lower:
                    db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)
                    break

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {e}")

    def _get_simple_fallback(self, message_text: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ fallback –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""

        message_lower = message_text.lower()

        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É–≥–ª—É–±–ª—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        if "—Å–ø–æ—Ä—Ç" in message_lower:
            responses = [
                "–ö—Ä—É—Ç–æ! –ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                "–û—Ç–ª–∏—á–Ω–æ! –í –∑–∞–ª —Ö–æ–¥–∏—à—å –∏–ª–∏ –¥–æ–º–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?",
                "–°—É–ø–µ—Ä! –î–∞–≤–Ω–æ —Å–ø–æ—Ä—Ç–æ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∏—Å—É" in message_lower or "–¥–∏–∑–∞–π–Ω" in message_lower:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?",
                "–ö–ª–∞—Å—Å–Ω–æ! –ê —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                "–û–≥–æ! –î–∞–≤–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∞–±–æ—Ç–∞" in message_lower:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ. –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?",
                "–Ø—Å–Ω–æ. –°–∞–º —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è –≤ –∫—Ä–∏–ø—Ç–µ. –ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?",
                "–ü–æ–Ω–∏–º–∞—é. –ê —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è?"
            ]
        elif "—É—Å—Ç–∞–ª–∞" in message_lower or "—Ç—è–∂–µ–ª–æ" in message_lower:
            responses = [
                "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è( –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ. –†–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞?",
                "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–ø—Ä—è–≥–∞–µ—Ç?"
            ]
        elif "?" in message_text:
            responses = [
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –ê —Ç—ã —Å–∞–º–∞ –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å. –ê —É —Ç–µ–±—è –∫–∞–∫ —Å —ç—Ç–∏–º?",
                "–û–≥–æ, –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º. –ê —Ç—ã –æ—Ç–∫—É–¥–∞ –∑–Ω–∞–µ—à—å?"
            ]
        else:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ) –ê –∫–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏?",
                "–Ø—Å–Ω–æ. –ê –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä –∫–∞–∫–∏–µ?"
            ]

        return random.choice(responses)

    def should_respond(self, chat_id: int, message_batch: MessageBatch) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not message_batch.messages:
            return False

        # –í –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
        last_message = message_batch.messages[-1]
        time_since = (datetime.utcnow() - last_message.created_at).total_seconds()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
        return time_since >= 5