"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–Ω—ã–π
"""
import asyncio
import random
from typing import Optional, Dict
from datetime import datetime, timedelta
from openai import OpenAI
from loguru import logger

from ..config.settings import settings, character_settings
from ..database.database import db_manager, MessageBatch
from ..utils.helpers import add_random_typo


class ResponseGenerator:
    """–ü—Ä–æ—Å—Ç–æ–π —á–µ–ª–æ–≤–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤"""

    def __init__(self):
        try:
            self.openai_client = OpenAI(
                api_key=settings.openai_api_key,
                timeout=60.0
            )
            self.character = character_settings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    async def generate_response_for_batch(self, chat_id: int, message_batch: MessageBatch) -> Optional[str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –ø–æ –¥–Ω—è–º"""
        try:
            logger.info(f"üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {message_batch.get_context_summary()}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=20)
            new_messages = message_batch.total_text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ
            self._save_simple_facts(chat_id, new_messages)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            stage_info = db_manager.get_or_create_dialogue_stage(chat_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
            termination_response = self._check_termination_signals(new_messages, stage_info,
                                                                   chat_id)
            if termination_response:
                return termination_response

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –æ–±—â–µ–Ω–∏—è
            days_communicating = (datetime.utcnow() - stage_info['created_at']).days
            stage_info = self._update_dialogue_stage(chat_id, stage_info, days_communicating, new_messages)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
            response = await self._generate_stage_based_response(
                conversation_history, new_messages, chat_id, stage_info
            )

            if not response:
                return self._get_simple_fallback(new_messages, chat_id)

            # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            response = self._make_more_human(response)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            logger.info(f"üìä –≠—Ç–∞–ø: {stage_info['current_stage']} | –î–µ–Ω—å: {days_communicating}")
            return response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_simple_fallback(message_batch.total_text, chat_id)

    def _check_termination_signals(self, message_text: str, stage_info: Dict, chat_id: int) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        message_lower = message_text.lower()

        # 1. –ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ
        crypto_negative = [
            "–∫—Ä–∏–ø—Ç–∞ —ç—Ç–æ —Ä–∞–∑–≤–æ–¥", "–Ω–µ –≤–µ—Ä—é –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "—ç—Ç–æ –ø–∏—Ä–∞–º–∏–¥–∞",
            "–∫—Ä–∏–ø—Ç–∞ —Ñ–∏–∫—Ü–∏—è", "–Ω–µ –¥–æ–≤–µ—Ä—è—é –∫—Ä–∏–ø—Ç–µ", "—ç—Ç–æ –æ–±–º–∞–Ω", "–∫—Ä–∏–ø—Ç–∞ —Ñ—É—Ñ–ª–æ"
        ]

        if stage_info['current_stage'] == "day1_filtering":
            if any(phrase in message_lower for phrase in crypto_negative):
                logger.info(f"üö´ –ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥")
                return random.choice([
                    "–ü–æ–Ω—è—Ç–Ω–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë) –£–¥–∞—á–∏!",
                    "–Ø—Å–Ω–æ. –ß—Ç–æ –∂, —É–¥–∞—á–∏ –≤ –∂–∏–∑–Ω–∏!",
                    "–ü–æ–Ω–∏–º–∞—é. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!"
                ])

        # 2. –°—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª—ã (—Ö–æ—á–µ—Ç —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è)
        call_signals = [
            "–¥–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è", "–º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–Ω–∞–±–µ—Ä–∏ –º–Ω–µ",
            "–¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º", "–º–æ–∂–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è", "–∑–≤–æ–Ω–∏", "–ø–æ–∑–≤–æ–Ω–∏"
        ]

        if any(signal in message_lower for signal in call_signals):
            logger.info(f"üéØ –°–¢–û–ü-–°–ò–ì–ù–ê–õ: —Ö–æ—á–µ—Ç —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è! –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞")
            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î
            db_manager.mark_dialogue_success(chat_id, "wants_call")
            return "–û–∫–µ–π, –¥–∞–≤–∞–π! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—É—Å—å —Å –¥–µ–ª–∞–º–∏ –∏ –Ω–∞–±–µ—Ä—É —Ç–µ–±–µ)"

        return None

    def _update_dialogue_stage(self, chat_id: int, stage_info: Dict, days: int, message_text: str) -> Dict:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø
        if settings.dev_mode:
            # –¥–µ–≤ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç—Ç–∞–ø–æ–≤
            message_count = len(db_manager.get_chat_messages(chat_id, limit=1000))
            if message_count >= 15 and stage_info['current_stage'] != "day5_offering":
                new_stage = "day5_offering"
            elif message_count >= 8 and stage_info['current_stage'] != "day3_deepening":
                new_stage = "day3_deepening"
            elif message_count >= 3:
                new_stage = "day1_filtering"
            else:
                new_stage = stage_info['current_stage']
        else:
            # –ø—Ä–æ–¥–∞–∫—à–µ–Ω –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç—Ç–∞–ø–æ–≤
            if days >= 5 and stage_info['current_stage'] != "day5_offering":
                new_stage = "day5_offering"
            elif days >= 3 and stage_info['current_stage'] != "day3_deepening":
                new_stage = "day3_deepening"
            elif days >= 1:
                new_stage = "day1_filtering"
            else:
                new_stage = stage_info['current_stage']

        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã (–í–°–ï–ì–î–ê, –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ)
        message_lower = message_text.lower()

        if settings.dev_mode:
            # –¥–µ–≤ –∞–Ω–∞–ª–∏–∑ - –ª–æ–≤–∏–º –±–æ–ª—å—à–µ —Å–ª–æ–≤
            financial_hints = ["—É—Å—Ç–∞–ª–∞", "—Ä–∞–±–æ—Ç–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–∫—É–ø–∏—Ç—å"]
            if any(hint in message_lower for hint in financial_hints):
                stage_info['has_financial_problems'] = True
        else:
            # –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∞–Ω–∞–ª–∏–∑ - —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –∂–∞–ª–æ–±—ã
            financial_complaints = ["–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è"]
            if any(complaint in message_lower for complaint in financial_complaints):
                stage_info['has_financial_problems'] = True

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        db_manager.update_dialogue_stage(chat_id, new_stage, stage_info)
        stage_info['current_stage'] = new_stage

        return stage_info

    async def _generate_stage_based_response(self, history: str, new_messages: str, chat_id: int, stage_info: Dict) -> \
    Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞"""

        current_stage = stage_info['current_stage']
        message_count = len(db_manager.get_chat_messages(chat_id, limit=1000))

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now() + timedelta(hours=3)  # UTC+3

        if current_stage == "day1_filtering":
            system_prompt = self._get_day1_prompt(stage_info)
        elif current_stage == "day3_deepening":
            system_prompt = self._get_day3_prompt(stage_info, message_count)
        elif current_stage == "day5_offering":
            system_prompt = self._get_day5_prompt(stage_info, new_messages)
        else:
            system_prompt = self._get_day1_prompt(stage_info)  # Fallback

        user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ü–ï–†–ï–ü–ò–°–ö–ê:
    {history}

    –û–ù–ê –ù–ê–ü–ò–°–ê–õ–ê:
    {new_messages}

    –û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ –°—Ç–∞—Å:"""

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI
        for attempt in range(3):
            try:
                response = self.openai_client.chat.completions.create(
                    model=settings.openai_model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.6,
                    max_tokens=150,
                    timeout=60
                )

                return response.choices[0].message.content.strip()

            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == 2:
                    return None
                await asyncio.sleep(2 ** attempt)

        return None

    def _get_day1_prompt(self, stage_info: Dict) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 1-2: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"""
        return f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –î–µ–Ω—å 1-2 –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –¥–µ–≤—É—à–∫–æ–π.

    –ó–ê–î–ê–ß–ò –≠–¢–ê–ü–ê:
    üîπ –£–∑–Ω–∞—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É –∏ –¥–æ—Ö–æ–¥—ã
    üîπ –°–æ–æ–±—â–∏—Ç—å —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—à—å —Ç—Ä–µ–π–¥–µ—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
    üîπ –í—ã—è–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º/–¥–æ—Ä–æ–≥–∏–º –≤–µ—â–∞–º
    üîπ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –µ—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ ‚Üí –≤–µ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å

    –û –¢–ï–ë–ï:
    - –¢—Ä–µ–π–¥–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç 6 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Å–µ–±—è
    - –†–æ–¥–∏–ª—Å—è –≤ –ì—Ä–µ—Ü–∏–∏, —É—á–∏–ª—Å—è –ú–ì–£, —Å–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ
    - –ù–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å, —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

    –°–¢–ò–õ–¨:
    - –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å  
    - –ñ–∏–≤–æ —Ä–µ–∞–≥–∏—Ä—É–π: "–æ–≥–æ", "–∫—Ä—É—Ç–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
    - –ü—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ—ë –∂–∏–∑–Ω–∏

    –ö–õ–Æ–ß–ï–í–´–ï –í–û–ü–†–û–°–´:
    - "–ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?"
    - "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
    - "–ö–∞–∫ –¥–µ–ª–∞ —Å –æ—Ç–ø—É—Å–∫–∞–º–∏/–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏?"
    - "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"

    –ï—Å–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç –æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ: "–ó–∞–Ω–∏–º–∞—é—Å—å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è. –ê —Ç—ã –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?"

    –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ù–ï —É–ø–æ–º–∏–Ω–∞–π –≤—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç–µ."""

    def _get_day3_prompt(self, stage_info: Dict, message_count: int) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 3-4: –£–≥–ª—É–±–ª–µ–Ω–∏–µ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º"""

        father_scenario = ""
        required_messages = 20 if settings.dev_mode else 200
        if message_count >= required_messages and not stage_info.get('father_scenario_used'):
            father_scenario = """
    üé≠ –°–¶–ï–ù–ê–†–ò–ô "–û–¢–ï–¶ –í –ë–û–õ–¨–ù–ò–¶–ï":
    –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã–π (–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π), –º–æ–∂–µ—à—å –ø—Ä–æ–ø–∞—Å—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å:
    "–ò–∑–≤–∏–Ω–∏ —á—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –æ—Ç–µ—Ü –ø–æ–ø–∞–ª –≤ –±–æ–ª—å–Ω–∏—Ü—É –≤ –¢—É—Ä—Ü–∏–∏. –£ –Ω–µ–≥–æ –∏–Ω—Å—É–ª—å—Ç, –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–µ—á—å. –°–µ–π—á–∞—Å –ª–µ—á—É –∫ –Ω–µ–º—É –≤ –ê–Ω—Ç–∞–ª—å—é"

    –¶–ï–õ–¨: —Å–æ–∑–¥–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –±–ª–∏–∑–æ—Å—Ç—å
    –ù–ï –ø—Ä–æ—Å–∏ –¥–µ–Ω–µ–≥! –¢–æ–ª—å–∫–æ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

        return f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç. –î–µ–Ω—å 3-4 –æ–±—â–µ–Ω–∏—è - —É–≥–ª—É–±–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

    {"–¢–í–û–Ø –°–ò–¢–£–ê–¶–ò–Ø:" if stage_info.get('has_financial_problems') else ""}
    {f"- –ó–Ω–∞–µ—à—å —á—Ç–æ —É –Ω–µ—ë –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏/—Ä–∞–±–æ—Ç–æ–π" if stage_info.get('has_financial_problems') else ""}
    {f"- –ó–Ω–∞–µ—à—å —á—Ç–æ —É –Ω–µ—ë –¥–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã" if stage_info.get('has_expensive_dreams') else ""}

    –ó–ê–î–ê–ß–ò –≠–¢–ê–ü–ê:
    üîπ –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –æ–±—â–∏—Ö —Ç–µ–º
    üîπ –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–≤–º/–ø—Ä–æ–±–ª–µ–º –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏  
    üîπ –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ "—Ç–∞–π–Ω–∞–º–∏" –¥–ª—è –¥–æ–≤–µ—Ä–∏—è
    üîπ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –µ—ë –∂–∏–∑–Ω–∏

    {father_scenario}

    –í–û–ü–†–û–°–´ –î–õ–Ø –£–ì–õ–£–ë–õ–ï–ù–ò–Ø:
    - "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–º—å—é, —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?"
    - "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?"
    - "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏?"
    - "–û —á—ë–º –º–µ—á—Ç–∞–µ—à—å?"

    –¢–í–û–ò "–¢–ê–ô–ù–´" –î–õ–Ø –î–û–í–ï–†–ò–Ø:
    - –°–µ–º—å—è –∂–∏–≤–µ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    - –†–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ –∞–ª—å–ø–∏–Ω–∏—Å—Ç–æ–º  
    - –ü–µ—Ä–µ–∂–∏–≤–∞–µ—à—å –∑–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π

    –û—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ç–µ–ø–ª–æ."""

    def _get_day5_prompt(self, stage_info: Dict, new_messages: str) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 5-7: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""

        message_lower = new_messages.lower()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        direct_complaint = any(phrase in message_lower for phrase in [
            "–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "—Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞", "—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è"
        ])

        father_approach = stage_info.get('father_scenario_used') and not stage_info.get('help_offered')

        offer_type = ""
        if direct_complaint:
            offer_type = """
    üéØ –ü–†–Ø–ú–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï (–æ–Ω–∞ –∂–∞–ª—É–µ—Ç—Å—è):
    "–°–ª—É—à–∞–π, –∞ –∫–∞–∫ —É —Ç–µ–±—è —Å –ü–ö –≤–æ–æ–±—â–µ? –ú–Ω–µ —Å–µ–π—á–∞—Å –ø–æ–º–æ—â–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ, –º–æ–∂–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –∏ –æ–±—Å—É–¥–∏—Ç—å"
    "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ —É —Ç–µ–±—è —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º? –ú–Ω–µ –∫–∞–∫ —Ä–∞–∑ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ" """

        elif father_approach:
            offer_type = """
    üé≠ –ü–û–î–•–û–î –ß–ï–†–ï–ó –û–¢–¶–ê:
    "–ë–ª–∏–Ω, –∏ —Ç–∞–∫ –≤—Å–µ –Ω–µ —Å–ª–∞–≤–∞ –±–æ–≥—É, –µ—â–µ –∏ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    "–ë–µ–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–¥–Ω–∞, –≤–æ—Ç –µ—â–µ —Ä–∞–±–æ—á–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏"
    –ü–æ—Ç–æ–º: "–ú–æ–∂–µ—à—å –º–Ω–µ –ø–æ —Ä–∞–±–æ—Ç–µ –ø–æ–º–æ—á—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?" """

        else:
            offer_type = """
    üí° –ú–Ø–ì–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
    "–°–ª—É—à–∞–π, —Ç—ã —Ç–∞–∫ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ —É—Å–ø–µ–≤–∞–µ—à—å, —É–¥–∏–≤–ª—è—é—Å—å. –ö—Å—Ç–∞—Ç–∏, –µ—Å—Ç—å –æ–¥–Ω–∞ –∏–¥–µ—è –ø–æ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ, –º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?" """

        return f"""–¢—ã –°—Ç–∞—Å. –î–µ–Ω—å 5-7 - –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–´.

    –¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
    {f"- –£ –Ω–µ—ë –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏: –î–ê" if stage_info.get('has_financial_problems') else ""}
    {f"- –£ –Ω–µ—ë –¥–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã: –î–ê" if stage_info.get('has_expensive_dreams') else ""}
    {f"- –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: –î–ê" if stage_info.get('father_scenario_used') else ""}
    {f"- –ü–æ–º–æ—â—å —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª: –î–ê" if stage_info.get('help_offered') else ""}

    üéØ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É/–ø–æ–º–æ—â—å

    {offer_type}

    –ü–û–°–õ–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:
    –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è:
    "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º, –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ª—É—á—à–µ –æ–±—ä—è—Å–Ω—é"

    –í–ê–ñ–ù–û: 
    - –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π
    - –ï—Å–ª–∏ –æ—Ç–∫–∞–∂–µ—Ç—Å—è - –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π
    - –¶–µ–ª—å: –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∑–≤–æ–Ω–∫–∞

    –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."""

#     async def _generate_natural_response(self, history: str, new_messages: str, chat_id: int) -> Optional[str]:
#         """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
#
#         # –ß–ï–õ–û–í–ï–ß–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
#         system_prompt = f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç, –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å –∏–∑ –ú–æ—Å–∫–≤—ã. –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
#
# –û –¢–ï–ë–ï:
# - –ó–∞–Ω–∏–º–∞–µ—à—å—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É–∂–µ 6 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Å–µ–±—è
# - –†–æ–¥–∏–ª—Å—è –≤ –ì—Ä–µ—Ü–∏–∏, –≤ –¥–µ—Ç—Å—Ç–≤–µ –º–Ω–æ–≥–æ –ø–µ—Ä–µ–µ–∑–∂–∞–ª–∏, —É—á–∏–ª—Å—è –≤ –ú–ì–£ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º
# - –†–æ–¥–∏—Ç–µ–ª–∏: –æ—Ç–µ—Ü –≤ –¢—É—Ä—Ü–∏–∏, –º–∞–º–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏
# - –†–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∞–ª—å–ø–∏–Ω–∏—Å—Ç–æ–º
# - –û–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å - –ª—é–±–∏—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —É–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞
# - –í –∫—É—Ä—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –º–æ–¥—ã, –±—Ä–µ–Ω–¥–æ–≤ (–∑–Ω–∞–µ—à—å —á—Ç–æ —Å—Ç–æ–Ω–∏–∫ = Stone Island, —Å–Ω–∏–∫ = –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Ç–¥)
#
# –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
# - –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
# - –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
# - –ë—É–¥—å –∂–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
# - –†–µ–∞–≥–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: "–æ–≥–æ", "–±–ª–∏–Ω", "–∂–µ—Å—Ç—å", "–∫—Ä—É—Ç–æ"
# - –ü—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ—ë –∂–∏–∑–Ω–∏
# - –ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Ä–µ—á—å - –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
#
# –ö–ê–ö –ó–ê–î–ê–í–ê–¢–¨ –í–û–ü–†–û–°–´ (–í–ê–ñ–ù–û!):
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —É–≥–ª—É–±–ª—è–π—Å—è –≤ –¥–µ—Ç–∞–ª–∏:
# - "–ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
# - "–ß—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?"
# - "–í –∑–∞–ª —Ö–æ–¥–∏—à—å –∏–ª–∏ –¥–æ–º–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?"
# - "–î–∞–≤–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
# - "–ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?"
#
# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –∏–∑–±–µ–≥–∞–π —Ä–æ–±–æ—Ç-–≤–æ–ø—Ä–æ—Å—ã:
# - "–ß—Ç–æ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è - —Å–ø–æ—Ä—Ç –∏–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ?"
# - "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏ —Å–∞–º–æ–µ –ª—é–±–∏–º–æ–µ?"
# - "–ß–µ–º –µ—â–µ —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
#
# –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ï –†–ê–ó–í–ò–¢–ò–ï:
# - –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã: —Ä–∞–±–æ—Ç–∞, —Ö–æ–±–±–∏, –ø–ª–∞–Ω—ã
# - –ï—Å–ª–∏ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –¥–µ–Ω—å–≥–∏/—Ä–∞–±–æ—Ç—É - –ø–æ–Ω–∏–º–∞—é—â–µ –æ—Ç–≤–µ—á–∞–π
# - –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ - —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ —Ç—Ä–µ–π–¥–∏–Ω–≥
# - –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ –µ–π –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ - –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–æ—á—å
#
# –ü–†–ò–ú–ï–†–´ –¢–í–û–ò–• –û–¢–í–ï–¢–û–í:
# "–ö—Ä—É—Ç–æ! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å. –ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
# "–ü–æ–Ω–∏–º–∞—é, —Å–∞–º –∏–Ω–æ–≥–¥–∞ —É—Å—Ç–∞—é. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
# "–û–≥–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?"
# "–û, —Å—Ç–æ–Ω–∏–∫ –∫—Ä—É—Ç–æ–π! –°–∞–º –∏–Ω–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—é. –î–∞–≤–Ω–æ –Ω–æ—Å–∏—à—å?"
#
# –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π –ø–∞—Ä–µ–Ω—å, –ù–ï –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–ª–∏ –±–æ—Ç. –ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –æ —á–µ–º —Ä–µ—á—å - –Ω–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å."""
#
#         user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ü–ï–†–ï–ü–ò–°–ö–ê:
# {history}
#
# –û–ù–ê –ù–ê–ü–ò–°–ê–õ–ê:
# {new_messages}
#
# –û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ –°—Ç–∞—Å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π):"""
#
#         # Retry –ª–æ–≥–∏–∫–∞
#         for attempt in range(3):
#             try:
#                 response = self.openai_client.chat.completions.create(
#                     model=settings.openai_model,
#                     messages=[
#                         {"role": "system", "content": system_prompt},
#                         {"role": "user", "content": user_prompt}
#                     ],
#                     temperature=0.5,   # –ï—â–µ –Ω–∏–∂–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
#                     max_tokens=150,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
#                     timeout=60
#                 )
#
#                 return response.choices[0].message.content.strip()
#
#             except Exception as e:
#                 logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
#                 if attempt == 2:
#                     return None
#                 await asyncio.sleep(2 ** attempt)
#
#         return None

    def _make_more_human(self, response: str) -> str:
        """–î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º - –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""

        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
        import re

        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –∏–º–µ–Ω–∞
        response = re.sub(r'\[\d{2}:\d{2}\]\s*', '', response)
        response = re.sub(r'\[\d{2}:\d{2}:\d{2}\]\s*', '', response)
        response = re.sub(r'–°—Ç–∞—Å:\s*', '', response)
        response = re.sub(r'–û–Ω–∞:\s*', '', response)
        response = re.sub(r'–ò–ò:\s*', '', response)
        response = re.sub(r'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\s*', '', response)

        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã
        response = re.sub(r'\d{4}-\d{2}-\d{2}', '', response)
        response = re.sub(r'–í—á–µ—Ä–∞ –±—ã–ª \w+\.?\s*', '', response)

        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—É—é —Ä–æ–±–æ—Ç–∏—á–Ω–æ—Å—Ç—å, –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ö–æ—Ä–æ—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        response = response.replace("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
        response = response.replace("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ")
        response = response.replace("—Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "")
        response = response.replace("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é", "–ù–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ")
        response = response.replace("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ", "")

        # –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        response = re.sub(r'\s+', ' ', response).strip()

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        if any(word in response.lower() for word in ["–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ"]):
            if random.random() < 0.3:
                response += ")"

        # –°–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ (3% —à–∞–Ω—Å, –µ—â–µ –º–µ–Ω—å—à–µ)
        if len(response) > 20 and random.random() < 0.03:
            response = add_random_typo(response)

        # –ù–ï —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        has_good_question = any(word in response.lower() for word in [
            "–∫–∞–∫–∏–º", "—á—Ç–æ —Ä–∏—Å—É", "—á—Ç–æ –æ–±—ã—á–Ω–æ", "–≥–¥–µ —Ä–∞–±–æ—Ç–∞", "–¥–∞–≤–Ω–æ", "–∫–∞–∫ –¥–æ–ª–≥–æ"
        ])

        if not has_good_question:
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            sentences = response.split('. ')
            if len(sentences) > 2:
                response = '. '.join(sentences[:2])
                if '?' not in response:
                    response += ". –ê —É —Ç–µ–±—è –∫–∞–∫?"

        return response.strip()

    def _save_simple_facts(self, chat_id: int, message_text: str):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            message_lower = message_text.lower()

            # –î–ï–í –†–ï–ñ–ò–ú - —É—Å–∫–æ—Ä—è–µ–º –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
            if settings.dev_mode:
                # –õ–æ–≤–∏–º –õ–Æ–ë–´–ï –Ω–∞–º–µ–∫–∏ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π/–¥–µ–Ω—å–≥–∞–º–∏
                work_problems = [
                    "—É—Å—Ç–∞–ª–∞", "—É—Å—Ç–∞–ª", "—É—Ç–æ–º–∏–ª–æ", "–≤—ã–º–∞—Ç—ã–≤–∞–µ—Ç", "–Ω–∞–¥–æ–µ–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è", "—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", "–¥–æ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è",
                    "–Ω–µ—Ç –¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–Ω–µ –º–æ–≥—É –ø–æ–∑–≤–æ–ª–∏—Ç—å"
                ]

                expensive_dreams = [
                    "—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É",
                    "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", "—Ö–æ—á—É —Å–µ–±–µ", "–Ω–µ –º–æ–≥—É –∫—É–ø–∏—Ç—å", "–¥–æ—Ä–æ–≥–æ –æ—á–µ–Ω—å"
                ]

                for problem in work_problems:
                    if problem in message_lower:
                        db_manager.save_person_fact(chat_id, "financial_complaint", problem, 0.9)
                        logger.info(f"üéØ –¢–ï–°–¢: –ù–∞–π–¥–µ–Ω–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É/–¥–µ–Ω—å–≥–∏: {problem}")

                for dream in expensive_dreams:
                    if dream in message_lower:
                        db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)
                        logger.info(f"üéØ –¢–ï–°–¢: –ù–∞–π–¥–µ–Ω–∞ –¥–æ—Ä–æ–≥–∞—è –º–µ—á—Ç–∞: {dream}")

            # –†–∞–±–æ—Ç–∞
            work_keywords = ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞ —É –º–µ–Ω—è", "—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—è –º–µ–Ω–µ–¥–∂–µ—Ä", "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å"]
            for keyword in work_keywords:
                if keyword in message_lower:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    if "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 0.8)
                    elif "–º–µ–Ω–µ–¥–∂–µ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–º–µ–Ω–µ–¥–∂–µ—Ä", 0.8)
                    elif "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–¥–∏–∑–∞–π–Ω–µ—Ä –æ–¥–µ–∂–¥—ã", 0.9)
                    break

            # –•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            hobby_patterns = {
                "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "–∫–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
                "–¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã": "–¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã",
                "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç"
            }

            for pattern, hobby in hobby_patterns.items():
                if pattern in message_lower:
                    db_manager.save_person_fact(chat_id, "hobby", hobby, 0.8)

            # –õ—é–±–∏–º—ã–µ –±—Ä–µ–Ω–¥—ã
            brand_patterns = {
                "kenzo": "KENZO",
                "—Å—Ç–æ–Ω–∏–∫": "Stone Island",
                "stone island": "Stone Island",
                "–Ω–∞–π–∫": "Nike",
                "–∞–¥–∏–¥–∞—Å": "Adidas"
            }

            for pattern, brand in brand_patterns.items():
                if pattern in message_lower:
                    db_manager.save_person_fact(chat_id, "favorite_brand", brand, 0.9)

            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤ –¥–µ–≤ —Ä–µ–∂–∏–º–µ –≤—ã—à–µ) ‚Üê ‚úÖ –í–ù–ï –¶–ò–ö–õ–ê!
            if not settings.dev_mode:
                # –ñ–∞–ª–æ–±—ã –Ω–∞ –¥–µ–Ω—å–≥–∏
                money_complaints = ["–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è"]
                for complaint in money_complaints:
                    if complaint in message_lower:
                        db_manager.save_person_fact(chat_id, "financial_complaint", complaint, 0.9)
                        break

                # –î–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã
                dreams = ["—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É"]
                for dream in dreams:
                    if dream in message_lower:
                        db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)
                        break

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {e}")

    def _get_simple_fallback(self, message_text: str, chat_id: int) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ fallback –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""

        message_lower = message_text.lower()

        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É–≥–ª—É–±–ª—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        if "—Å–ø–æ—Ä—Ç" in message_lower:
            responses = [
                "–ö—Ä—É—Ç–æ! –ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                "–û—Ç–ª–∏—á–Ω–æ! –í –∑–∞–ª —Ö–æ–¥–∏—à—å –∏–ª–∏ –¥–æ–º–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?",
                "–°—É–ø–µ—Ä! –î–∞–≤–Ω–æ —Å–ø–æ—Ä—Ç–æ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∏—Å—É" in message_lower or "–¥–∏–∑–∞–π–Ω" in message_lower:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?",
                "–ö–ª–∞—Å—Å–Ω–æ! –ê —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                "–û–≥–æ! –î–∞–≤–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∞–±–æ—Ç–∞" in message_lower:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ. –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?",
                "–Ø—Å–Ω–æ. –°–∞–º —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è –≤ –∫—Ä–∏–ø—Ç–µ. –ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?",
                "–ü–æ–Ω–∏–º–∞—é. –ê —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è?"
            ]
        elif "—É—Å—Ç–∞–ª–∞" in message_lower or "—Ç—è–∂–µ–ª–æ" in message_lower:
            responses = [
                "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è( –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ. –†–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞?",
                "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–ø—Ä—è–≥–∞–µ—Ç?"
            ]
        elif "?" in message_text:
            responses = [
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –ê —Ç—ã —Å–∞–º–∞ –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å. –ê —É —Ç–µ–±—è –∫–∞–∫ —Å —ç—Ç–∏–º?",
                "–û–≥–æ, –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º. –ê —Ç—ã –æ—Ç–∫—É–¥–∞ –∑–Ω–∞–µ—à—å?"
            ]
        else:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ) –ê –∫–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏?",
                "–Ø—Å–Ω–æ. –ê –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä –∫–∞–∫–∏–µ?"
            ]

        return random.choice(responses)

    def should_respond(self, chat_id: int, message_batch: MessageBatch) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not message_batch.messages:
            return False

        # –í –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
        last_message = message_batch.messages[-1]
        time_since = (datetime.utcnow() - last_message.created_at).total_seconds()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
        return time_since >= 5