"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–Ω–∞–ª–∏–∑–∞
"""
import json
from typing import Optional, Dict, Tuple
from datetime import datetime
from openai import OpenAI
from loguru import logger

from ..config.settings import settings, character_settings
from ..database.database import db_manager, MessageBatch
from ..analysis.conversation_analyzer import ConversationAnalyzer
from ..utils.helpers import add_random_typo


class ResponseGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ —Ü–µ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    
    def __init__(self):
        try:
            self.openai_client = OpenAI(api_key=settings.openai_api_key)
            self.character = character_settings
            self.conversation_analyzer = ConversationAnalyzer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def generate_response_for_batch(self, chat_id: int, message_batch: MessageBatch) -> Optional[str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {message_batch.get_context_summary()}")
            
            # 1. –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê
            conversation_analysis = self.conversation_analyzer.analyze_conversation_context(
                chat_id, message_batch
            )
            
            # 2. –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ò–¢–£–ê–¶–ò–ô
            critical_response = self._handle_critical_situations(conversation_analysis)
            if critical_response:
                return critical_response
            
            # 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ì–û –û–¢–í–ï–¢–ê
            strategic_response = await self._generate_strategic_response(
                chat_id, message_batch, conversation_analysis
            )
            
            # 4. –£–õ–£–ß–®–ï–ù–ò–ï –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–°–¢–ò
            final_response = self._enhance_response_realism(strategic_response)
            
            # 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
            self._update_conversation_context(chat_id, conversation_analysis)
            
            logger.info(f"‚ú® –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {final_response[:50]}...")
            return final_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(message_batch)
    
    def _handle_critical_situations(self, analysis: Dict) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        
        stage_analysis = analysis.get("stage_analysis", {})
        crypto_reaction = stage_analysis.get("crypto_reaction", "unknown")
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ - –≥–æ—Ç–æ–≤–∏–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
        if crypto_reaction == "negative":
            logger.warning("üö® –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞")
            return "–ü–æ–Ω—è—Ç–Ω–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë) –£–¥–∞—á–∏ —Ç–µ–±–µ!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        special_scenarios = analysis.get("strategy_recommendations", {}).get("special_scenarios", [])
        
        if "dialogue_termination_risk" in special_scenarios:
            logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
        
        return None
    
    async def _generate_strategic_response(self, chat_id: int, message_batch: MessageBatch, 
                                         analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        response_type = self._determine_response_type(analysis)
        
        if response_type == "trauma_response":
            return await self._generate_trauma_response(analysis)
        elif response_type == "financial_exploration":
            return await self._generate_financial_exploration_response(analysis)
        elif response_type == "work_proposal":
            return await self._generate_work_proposal_response(analysis)
        elif response_type == "father_scenario":
            return await self._generate_father_scenario_response(analysis)
        else:
            return await self._generate_standard_response(chat_id, message_batch, analysis)
    
    def _determine_response_type(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        priority_focus = analysis.get("strategy_recommendations", {}).get("priority_focus", "")
        
        if "work_proposal" in priority_focus:
            return "work_proposal"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏—Å—Ç–æ—Ä–∏–π
        readiness = analysis.get("overall_metrics", {}).get("readiness_assessment", {})
        if readiness.get("ready_for_story_sharing", False):
            return "trauma_response"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        special_scenarios = analysis.get("strategy_recommendations", {}).get("special_scenarios", [])
        if "father_hospital_scenario" in special_scenarios:
            return "father_scenario"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö
        if "financial_signals_detection" in priority_focus:
            return "financial_exploration"
        
        return "standard_response"
    
    async def _generate_trauma_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–∞–≤–º—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        
        emotional_analysis = analysis.get("emotional_analysis", {})
        trauma_analyzer = self.conversation_analyzer.trauma_analyzer
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏—Å—Ç–æ—Ä–∏–π
        story_recommendations = emotional_analysis.get("story_recommendations", {})
        trust_level = emotional_analysis.get("trust_level", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π
        should_share, story_id, story_content = trauma_analyzer.should_share_stas_story(
            story_recommendations, trust_level
        )
        
        if should_share:
            logger.info(f"üíî –î–µ–ª–∏–º—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π: {story_id}")
            return story_content
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç
            her_trauma = "–û–Ω–∞ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º"  # –£–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            return trauma_analyzer.generate_trauma_response(her_trauma, emotional_analysis)
    
    async def _generate_financial_exploration_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        stage_analysis = analysis.get("stage_analysis", {})
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
        prompt = f"""–¢—ã –°—Ç–∞—Å, –¥–µ–Ω—å {dialogue_day} –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –¶–ï–õ–¨: –º—è–≥–∫–æ –≤—ã—è–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–µ–≤—É—à–∫–∏.

–°–¢–†–ê–¢–ï–ì–ò–Ø:
- –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ, –∑–∞—Ä–ø–ª–∞—Ç–µ, –ø–ª–∞–Ω–∞—Ö
- –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ  
- –í—ã—è–≤–ª—è–π –∂–∞–ª–æ–±—ã –Ω–∞ –¥–µ–Ω—å–≥–∏
- –ò–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è –¥–æ—Ä–æ–≥–∏–º–∏ –º–µ—á—Ç–∞–º–∏ (–º–∞—à–∏–Ω—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)

–ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê: {analysis.get('strategy_recommendations', {}).get('financial_strategy', '')}

–û–¢–í–ï–¢–¨ –æ—Ç –ª–∏—Ü–∞ –°—Ç–∞—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å):"""

        response = self.openai_client.chat.completions.create(
            model=settings.openai_model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=100
        )
        
        return response.choices[0].message.content.strip()
    
    async def _generate_work_proposal_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        
        financial_analysis = analysis.get("financial_analysis", {})
        readiness_level = financial_analysis.get("readiness_level", "–Ω–∏–∑–∫–∞—è")
        
        logger.info(f"üíº –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é: {readiness_level}")
        
        if readiness_level == "–≤—ã—Å–æ–∫–∞—è":
            return "–°–ª—É—à–∞–π, —É –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è –∫–∞–∫ –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ—Å—Ñ–µ—Ä–µ. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –ú–æ–≥—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±—ä—è—Å–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
        else:
            return "–ó–Ω–∞–µ—à—å, —É –º–µ–Ω—è –µ—Å—Ç—å –º—ã—Å–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å. –ù–µ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å?"
    
    async def _generate_father_scenario_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ—Ç—Ü–æ–º –≤ –±–æ–ª—å–Ω–∏—Ü–µ"""
        
        emotional_analysis = analysis.get("emotional_analysis", {})
        trust_level = emotional_analysis.get("trust_level", 0)
        
        if trust_level >= 7:
            return ("–ò–∑–≤–∏–Ω–∏ —á—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –ø–∏—Å–∞–ª... –û—Ç–µ—Ü –≤ –±–æ–ª—å–Ω–∏—Ü–µ –≤ –¢—É—Ä—Ü–∏–∏, –∏–Ω—Å—É–ª—å—Ç. "
                   "–ù–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, –≤—Ä–∞—á–∏ –±–æ—Ä—é—Ç—Å—è. –¢—è–∂–µ–ª–æ –æ—á–µ–Ω—å.")
        else:
            return "–ò–∑–≤–∏–Ω–∏ –∑–∞ –º–æ–ª—á–∞–Ω–∏–µ, —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?"
    
    async def _generate_standard_response(self, chat_id: int, message_batch: MessageBatch, 
                                        analysis: Dict) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        stage_strategy = analysis.get("strategy_recommendations", {}).get("stage_strategy", "")
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=20)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Ü–µ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        system_prompt = self._build_updated_system_prompt(analysis)
        
        user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ò–°–¢–û–†–ò–Ø:
{conversation_history}

–ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
{message_batch.total_text}

–°–¢–†–ê–¢–ï–ì–ò–Ø –≠–¢–ê–ü–ê:
{stage_strategy}

–ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò:
{analysis.get('overall_metrics', {}).get('readiness_assessment', {}).get('next_recommended_action', '')}

–û–¢–í–ï–¢–¨ –æ—Ç –ª–∏—Ü–∞ –°—Ç–∞—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å):"""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        response = self.openai_client.chat.completions.create(
            model=settings.openai_model,
            messages=messages,
            temperature=0.8,
            max_tokens=120
        )
        
        return response.choices[0].message.content.strip()
    
    def _build_updated_system_prompt(self, analysis: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        stage_analysis = analysis.get("stage_analysis", {})
        current_stage = stage_analysis.get("current_stage", "initiation")
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        
        return f"""–¢—ã {self.character.name}, {self.character.age}-–ª–µ—Ç–Ω–∏–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä. –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤.

–ò–°–¢–ò–ù–ù–ê–Ø –¶–ï–õ–¨: –ß–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –≤—ã—è–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ.

–¢–ï–ö–£–©–ò–ô –≠–¢–ê–ü: {current_stage.upper()} (–î–µ–Ω—å {dialogue_day})

–ë–ò–û–ì–†–ê–§–ò–Ø: {self.character.background_story}

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û –≠–¢–ê–ü–ê–ú:
- –ò–ù–ò–¶–ò–ê–¶–ò–Ø: –£–∑–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫—Ä–∏–ø—Ç–æ, –≤—ã—è–≤–∏—Ç—å –¥–æ—Ä–æ–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
- –£–î–ï–†–ñ–ê–ù–ò–ï: –£–≥–ª—É–±–ª—è—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–µ —Ç–µ–º—ã
- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã—è–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∂–∞–ª–æ–±—ã, —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
- –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–º–æ—â—å/—Ä–∞–±–æ—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ—Å—Ñ–µ—Ä–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –í–°–ï–ì–î–ê –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ (–µ—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è - –≥–æ—Ç–æ–≤—å—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å)
- –í—ã—è–≤–ª—è–π –∂–∞–ª–æ–±—ã –Ω–∞ –¥–µ–Ω—å–≥–∏/—Ä–∞–±–æ—Ç—É
- –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Ç—Ä–∞–≤–º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
- –ü–æ–º–Ω–∏ –≤—Å—ë —á—Ç–æ –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç

–ò–°–¢–û–†–ò–ò –î–õ–Ø –†–ê–°–ö–†–´–¢–ò–Ø (–ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –¥–æ–≤–µ—Ä–∏–∏):
1. –°–º–µ—Ä—Ç—å –ª—É—á—à–µ–≥–æ –¥—Ä—É–≥–∞ –≤ 13 –ª–µ—Ç
2. –ü–æ—Ç–µ—Ä—è –ø–∞—Ä—Ç–Ω–µ—Ä—à–∏ –∏ —Ä–µ–±–µ–Ω–∫–∞ –ø—Ä–∏ —Ä–æ–¥–∞—Ö

–ó–ê–ü–†–ï–©–ï–ù–û:
- –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    
    def _enhance_response_realism(self, response: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        # –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω—é—é –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å
        response = response.replace("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ")
        response = response.replace("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ (20% —à–∞–Ω—Å)
        if len(response) > 20 and response.count('.') <= 2:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            import random
            if random.random() < 0.2:
                response = add_random_typo(response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ç–∏–∫–æ–Ω—ã –∏–Ω–æ–≥–¥–∞
        import random
        if random.random() < 0.3:
            if any(word in response.lower() for word in ['–∑–¥–æ—Ä–æ–≤–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫–ª–∞—Å—Å–Ω–æ']):
                response += ")"
        
        return response
    
    def _update_conversation_context(self, chat_id: int, analysis: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            stage_analysis = analysis.get("stage_analysis", {})
            financial_analysis = analysis.get("financial_analysis", {})
            emotional_analysis = analysis.get("emotional_analysis", {})
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            current_stage = stage_analysis.get("current_stage", "initial")
            if current_stage != "initial":
                update_data["relationship_stage"] = current_stage
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
            detected_interests = []
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            expensive_desires = financial_analysis.get("expensive_desires", [])
            if expensive_desires:
                detected_interests.extend([f"–∂–µ–ª–∞–Ω–∏–µ_{desire}" for desire in expensive_desires])
            
            # –ñ–∞–ª–æ–±—ã –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã
            money_complaints = financial_analysis.get("ai_analysis", {}).get("money_complaints_detected", [])
            if money_complaints:
                detected_interests.extend([f"–∂–∞–ª–æ–±–∞_{complaint}" for complaint in money_complaints])
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
            traumas_shared = emotional_analysis.get("emotional_analysis", {}).get("traumas_shared", [])
            if traumas_shared:
                detected_interests.extend([f"—Ç—Ä–∞–≤–º–∞_{trauma}" for trauma in traumas_shared])
            
            if detected_interests:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
                context = db_manager.get_chat_context(chat_id)
                existing_interests = []
                if context and context.detected_interests:
                    try:
                        existing_interests = json.loads(context.detected_interests)
                    except json.JSONDecodeError:
                        existing_interests = []
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
                all_interests = list(set(existing_interests + detected_interests))
                update_data["detected_interests"] = json.dumps(all_interests)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if update_data:
                db_manager.update_chat_context(chat_id, **update_data)
                logger.debug(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {list(update_data.keys())}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    def _get_fallback_response(self, message_batch: MessageBatch) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è fallback
        message_text = message_batch.total_text.lower()
        
        if any(word in message_text for word in ['—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—é', '–∑–∞—Ä–ø–ª–∞—Ç–∞']):
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —Ç—ã —Ä–∞–±–æ—Ç–æ–π –¥–æ–≤–æ–ª—å–Ω–∞?"
        
        elif any(word in message_text for word in ['—É—Å—Ç–∞–ª–∞', '—Ç—è–∂–µ–ª–æ', '–ø—Ä–æ–±–ª–µ–º—ã']):
            return "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –£ –≤—Å–µ—Ö –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        
        elif '?' in message_text:
            return "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –°–∞–º –∏–Ω–æ–≥–¥–∞ –æ–± —ç—Ç–æ–º –¥—É–º–∞—é. –ê —Ç—ã –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?"
        
        else:
            return "–ü–æ–Ω—è—Ç–Ω–æ. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ?"
    
    def should_respond(self, chat_id: int, message_batch: MessageBatch) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –¥–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤)"""
        
        if not message_batch.messages:
            return False
        
        # –í –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
        last_message = message_batch.messages[-1]
        time_since = (datetime.utcnow() - last_message.created_at).total_seconds()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        if time_since < 3:
            return False
        
        return True