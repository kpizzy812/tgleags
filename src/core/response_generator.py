"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–Ω–∞–ª–∏–∑–∞
"""
import json
import asyncio
from typing import Optional, Dict, Tuple
from datetime import datetime
from openai import OpenAI
from loguru import logger

from ..config.settings import settings, character_settings
from ..database.database import db_manager, MessageBatch
from ..analysis.conversation_analyzer import ConversationAnalyzer
from ..utils.helpers import add_random_typo


class ResponseGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ —Ü–µ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    
    def __init__(self):
        try:
            self.openai_client = OpenAI(
                api_key=settings.openai_api_key,
                timeout=60.0
            )
            self.character = character_settings
            self.conversation_analyzer = ConversationAnalyzer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    def _get_total_messages_count(self, chat_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
        try:
            messages = db_manager.get_chat_messages(chat_id, limit=1000)
            return len(messages)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 1

    def _can_ask_about_work(self, total_messages: int, new_message_text: str) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ"""
        if total_messages >= 10:
            return True

        work_mentions = ["–Ω–∞ —Ä–∞–±–æ—Ç–µ", "—Å —Ä–∞–±–æ—Ç—ã", "—É—Å—Ç–∞–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ", "—Ä–∞–±–æ—Ç–∞—é", "–≤ –æ—Ñ–∏—Å–µ"]
        message_lower = new_message_text.lower()
        if any(mention in message_lower for mention in work_mentions):
            return True

        return False

    def _can_mention_crypto(self, total_messages: int, new_message_text: str) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ —É–ø–æ–º–∏–Ω–∞—Ç—å –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥"""
        asking_patterns = ["–∞ —Ç—ã —á–µ–º", "—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è", "–∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å", "—Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞"]
        message_lower = new_message_text.lower()
        if any(pattern in message_lower for pattern in asking_patterns):
            return True

        if total_messages >= 15:
            return True

        return False

    async def generate_response_for_batch(self, chat_id: int, message_batch: MessageBatch) -> Optional[str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {message_batch.get_context_summary()}")

            # 1. –ü–û–õ–£–ß–ê–ï–ú –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–û–û–ë–©–ï–ù–ò–ô
            total_messages_count = self._get_total_messages_count(chat_id)

            # 2. –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê
            conversation_analysis = self.conversation_analyzer.analyze_conversation_context(
                chat_id, message_batch
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–Ω–∞–ª–∏–∑
            conversation_analysis["total_messages_count"] = total_messages_count
            conversation_analysis["can_ask_about_work"] = self._can_ask_about_work(
                total_messages_count, message_batch.total_text
            )
            conversation_analysis["can_mention_crypto"] = self._can_mention_crypto(
                total_messages_count, message_batch.total_text
            )

            # 3. –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ò–¢–£–ê–¶–ò–ô
            critical_response = self._handle_critical_situations(conversation_analysis)
            if critical_response:
                return critical_response

            # 4. –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–û–ì–û –û–¢–í–ï–¢–ê
            strategic_response = await self._generate_strategic_response(
                chat_id, message_batch, conversation_analysis
            )

            # 5. –£–õ–£–ß–®–ï–ù–ò–ï –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–°–¢–ò
            final_response = self._enhance_response_realism(strategic_response)

            # 6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
            self._update_conversation_context(chat_id, conversation_analysis)

            logger.info(f"‚ú® –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {final_response[:50]}...")
            return final_response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(message_batch)
    
    def _handle_critical_situations(self, analysis: Dict) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""

        stage_analysis = analysis.get("stage_analysis", {})
        crypto_reaction = stage_analysis.get("crypto_reaction", "unknown")
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ - –≥–æ—Ç–æ–≤–∏–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
        if crypto_reaction == "negative":
            logger.warning("üö® –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞")
            return "–ü–æ–Ω—è—Ç–Ω–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë) –£–¥–∞—á–∏ —Ç–µ–±–µ!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        special_scenarios = analysis.get("strategy_recommendations", {}).get("special_scenarios", [])
        
        if "dialogue_termination_risk" in special_scenarios:
            logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
        
        return None
    
    async def _generate_strategic_response(self, chat_id: int, message_batch: MessageBatch, 
                                         analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        response_type = self._determine_response_type(analysis)
        
        if response_type == "trauma_response":
            return await self._generate_trauma_response(analysis)
        elif response_type == "financial_exploration":
            return await self._generate_financial_exploration_response(analysis)
        elif response_type == "work_proposal":
            return await self._generate_work_proposal_response(analysis)
        elif response_type == "father_scenario":
            return await self._generate_father_scenario_response(analysis)
        else:
            return await self._generate_standard_response(chat_id, message_batch, analysis)

    def _determine_response_type(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        total_messages = analysis.get("total_messages_count", 1)

        # –í –ø–µ—Ä–≤—ã—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö - —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if total_messages < 10:
            return "standard_response"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤
        priority_focus = analysis.get("strategy_recommendations", {}).get("priority_focus", "")

        if "work_proposal" in priority_focus:
            return "work_proposal"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏—Å—Ç–æ—Ä–∏–π
        readiness = analysis.get("overall_metrics", {}).get("readiness_assessment", {})
        if readiness.get("ready_for_story_sharing", False):
            return "trauma_response"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        special_scenarios = analysis.get("strategy_recommendations", {}).get("special_scenarios", [])
        if "father_hospital_scenario" in special_scenarios:
            return "father_scenario"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 10+ —Å–æ–æ–±—â–µ–Ω–∏–π)
        if "financial_signals_detection" in priority_focus and analysis.get("can_ask_about_work", False):
            return "financial_exploration"

        return "standard_response"
    
    async def _generate_trauma_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–∞–≤–º—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        
        emotional_analysis = analysis.get("emotional_analysis", {})
        trauma_analyzer = self.conversation_analyzer.trauma_analyzer
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏—Å—Ç–æ—Ä–∏–π
        story_recommendations = emotional_analysis.get("story_recommendations", {})
        trust_level = emotional_analysis.get("trust_level", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π
        should_share, story_id, story_content = trauma_analyzer.should_share_stas_story(
            story_recommendations, trust_level
        )
        
        if should_share:
            logger.info(f"üíî –î–µ–ª–∏–º—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π: {story_id}")
            return story_content
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç
            her_trauma = "–û–Ω–∞ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º"  # –£–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            return trauma_analyzer.generate_trauma_response(her_trauma, emotional_analysis)
    
    async def _generate_financial_exploration_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        stage_analysis = analysis.get("stage_analysis", {})
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
        prompt = f"""–¢—ã –°—Ç–∞—Å, –¥–µ–Ω—å {dialogue_day} –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –¶–ï–õ–¨: –º—è–≥–∫–æ –≤—ã—è–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–µ–≤—É—à–∫–∏.

–°–¢–†–ê–¢–ï–ì–ò–Ø:
- –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ, –∑–∞—Ä–ø–ª–∞—Ç–µ, –ø–ª–∞–Ω–∞—Ö
- –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ  
- –í—ã—è–≤–ª—è–π –∂–∞–ª–æ–±—ã –Ω–∞ –¥–µ–Ω—å–≥–∏
- –ò–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è –¥–æ—Ä–æ–≥–∏–º–∏ –º–µ—á—Ç–∞–º–∏ (–º–∞—à–∏–Ω—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)

–ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê: {analysis.get('strategy_recommendations', {}).get('financial_strategy', '')}

–û–¢–í–ï–¢–¨ –æ—Ç –ª–∏—Ü–∞ –°—Ç–∞—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å):"""

        response = self.openai_client.chat.completions.create(
            model=settings.openai_model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=100
        )
        
        return response.choices[0].message.content.strip()
    
    async def _generate_work_proposal_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        
        financial_analysis = analysis.get("financial_analysis", {})
        readiness_level = financial_analysis.get("readiness_level", "–Ω–∏–∑–∫–∞—è")
        
        logger.info(f"üíº –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é: {readiness_level}")
        
        if readiness_level == "–≤—ã—Å–æ–∫–∞—è":
            return "–°–ª—É—à–∞–π, —É –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è –∫–∞–∫ –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ—Å—Ñ–µ—Ä–µ. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –ú–æ–≥—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±—ä—è—Å–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
        else:
            return "–ó–Ω–∞–µ—à—å, —É –º–µ–Ω—è –µ—Å—Ç—å –º—ã—Å–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å. –ù–µ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å?"
    
    async def _generate_father_scenario_response(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ—Ç—Ü–æ–º –≤ –±–æ–ª—å–Ω–∏—Ü–µ"""
        
        emotional_analysis = analysis.get("emotional_analysis", {})
        trust_level = emotional_analysis.get("trust_level", 0)
        
        if trust_level >= 7:
            return ("–ò–∑–≤–∏–Ω–∏ —á—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –ø–∏—Å–∞–ª... –û—Ç–µ—Ü –≤ –±–æ–ª—å–Ω–∏—Ü–µ –≤ –¢—É—Ä—Ü–∏–∏, –∏–Ω—Å—É–ª—å—Ç. "
                   "–ù–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, –≤—Ä–∞—á–∏ –±–æ—Ä—é—Ç—Å—è. –¢—è–∂–µ–ª–æ –æ—á–µ–Ω—å.")
        else:
            return "–ò–∑–≤–∏–Ω–∏ –∑–∞ –º–æ–ª—á–∞–Ω–∏–µ, —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?"

    async def _generate_standard_response(self, chat_id: int, message_batch: MessageBatch,
                                        analysis: Dict) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
        stage_strategy = analysis.get("strategy_recommendations", {}).get("stage_strategy", "")

        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=20)

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Ü–µ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        system_prompt = self._build_updated_system_prompt(analysis)

        user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ò–°–¢–û–†–ò–Ø:
{conversation_history}

–ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
{message_batch.total_text}

–°–¢–†–ê–¢–ï–ì–ò–Ø –≠–¢–ê–ü–ê:
{stage_strategy}

–ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò:
{analysis.get('overall_metrics', {}).get('readiness_assessment', {}).get('next_recommended_action', '')}

–û–¢–í–ï–¢–¨ –æ—Ç –ª–∏—Ü–∞ –°—Ç–∞—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å):"""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]

        # Retry –ª–æ–≥–∏–∫–∞
        for attempt in range(3):
            try:
                response = self.openai_client.chat.completions.create(
                    model=settings.openai_model,
                    messages=messages,
                    temperature=0.8,
                    max_tokens=120,
                    timeout=60  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º timeout
                )

                return response.choices[0].message.content.strip()

            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    return self._get_emergency_fallback_response(message_batch)

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await asyncio.sleep(2 ** attempt)  # 0, 2, 4 —Å–µ–∫—É–Ω–¥—ã

    def _get_emergency_fallback_response(self, message_batch: MessageBatch) -> str:
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""

        message_text = message_batch.total_text.lower()

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç = –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–ª–∏–Ω–Ω—ã–π = –º–Ω–æ–≥–æ
        estimated_messages = len(message_text) // 20 + 1  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

        # –í –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        if estimated_messages <= 5:
            if "–ø—Ä–∏–≤–µ—Ç" in message_text or "–∑–Ω–∞–∫–æ–º—Å—Ç–≤" in message_text:
                responses = [
                    "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°—Ç–∞—Å) –ö–∞–∫ –¥–µ–ª–∞?",
                    "–ü—Ä–∏–≤–µ—Ç! –°—Ç–∞—Å –º–µ–Ω—è –∑–æ–≤—É—Ç. –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
                    "–ü—Ä–∏–≤–µ—Ç) –ú–µ–Ω—è –°—Ç–∞—Å –∑–æ–≤—É—Ç. –ö–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è?"
                ]
            else:
                responses = [
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ) –ê –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞ —Å–µ–≥–æ–¥–Ω—è?",
                    "–ü–æ–Ω—è—Ç–Ω–æ. –ê —á—Ç–æ –¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
                    "–Ø—Å–Ω–æ. –ê –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å –¥–µ–Ω—å?"
                ]

        # –ü–æ—Å–ª–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π - —á—É—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        elif estimated_messages <= 10:
            if "—Ä–∞–±–æ—Ç–∞" in message_text:
                responses = [
                    "–ü–æ–Ω–∏–º–∞—é. –ê —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                    "–Ø—Å–Ω–æ. –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?",
                    "–ü–æ–Ω—è—Ç–Ω–æ. –ê –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è?"
                ]
            elif "—É—Å—Ç–∞–ª–∞" in message_text:
                responses = [
                    "–¢—è–∂–µ–ª—ã–π –¥–µ–Ω—å? –ê —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –≤–µ—á–µ—Ä–æ–º?",
                    "–ü–æ–Ω–∏–º–∞—é. –ê –∫–∞–∫ –æ–±—ã—á–Ω–æ –æ—Ç–¥—ã—Ö–∞–µ—à—å?",
                    "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
                ]
            else:
                responses = [
                    "–ü–æ–Ω—è—Ç–Ω–æ) –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—à—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
                    "–Ø—Å–Ω–æ. –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?"
                ]

        # –ü–æ—Å–ª–µ 10+ —Å–æ–æ–±—â–µ–Ω–∏–π - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        else:
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –ò–ò
            if any(word in message_text for word in ['—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—é', '—É—Å—Ç–∞–ª–∞']):
                responses = [
                    "–ü–æ–Ω–∏–º–∞—é, —Ä–∞–±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–º–∞—Ç—ã–≤–∞—Ç—å. –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —Ç—ã —Ä–∞–±–æ—Ç–æ–π –¥–æ–≤–æ–ª—å–Ω–∞?",
                    "–ó–Ω–∞–∫–æ–º–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ. –°–∞–º —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è –≤ –∫—Ä–∏–ø—Ç–æ—Å—Ñ–µ—Ä–µ. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–ø—Ä—è–≥–∞–µ—Ç?"
                ]
            elif any(word in message_text for word in ['–¥–µ–Ω—å–≥–∏', '–¥–µ–Ω–µ–≥', '–¥–æ—Ä–æ–≥–æ']):
                responses = [
                    "–î–∞, —Å–µ–π—á–∞—Å –≤—Å–µ –¥–æ—Ä–æ–∂–∞–µ—Ç. –£ –º–µ–Ω—è –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –¥–æ—Ö–æ–¥—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –±—ã–≤–∞—é—Ç. –ê —É —Ç–µ–±—è –∫–∞–∫ —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏?",
                    "–ü–æ–Ω–∏–º–∞—é, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª–µ–Ω. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å?"
                ]
            elif '?' in message_text:
                responses = [
                    "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –°–∞–º –∏–Ω–æ–≥–¥–∞ –æ–± —ç—Ç–æ–º –¥—É–º–∞—é. –ê —Ç—ã –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å. –ê —É —Ç–µ–±—è –∫–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?"
                ]
            else:
                responses = [
                    "–ü–æ–Ω—è—Ç–Ω–æ. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ?",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–µ–π—á–∞—Å –≤–æ–ª–Ω—É–µ—Ç?",
                    "–Ø—Å–Ω–æ. –ê –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?"
                ]

        import random
        return random.choice(responses)

    def _build_updated_system_prompt(self, analysis: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""

        stage_analysis = analysis.get("stage_analysis", {})
        current_stage = stage_analysis.get("current_stage", "initiation")
        dialogue_day = stage_analysis.get("dialogue_day", 1)
        total_messages = analysis.get("total_messages_count", 1)
        can_ask_work = analysis.get("can_ask_about_work", False)
        can_mention_crypto = analysis.get("can_mention_crypto", False)

        return f"""–¢—ã {self.character.name}, {self.character.age}-–ª–µ—Ç–Ω–∏–π –ø–∞—Ä–µ–Ω—å. –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –¥–µ–≤—É—à–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤.

    –¢–ï–ö–£–©–ò–ô –≠–¢–ê–ü: {current_stage.upper()} (–î–µ–Ω—å {dialogue_day}, —Å–æ–æ–±—â–µ–Ω–∏–µ #{total_messages})

    –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–û–û–ë–©–ï–ù–ò–ô:
    - –°–û–û–ë–©–ï–ù–ò–Ø 1-5: –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ (–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞)
    - –°–û–û–ë–©–ï–ù–ò–Ø 6-10: –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ö–æ–±–±–∏, –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ)  
    - –°–û–û–ë–©–ï–ù–ò–Ø 10+: –ú–û–ñ–ù–û —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ

    –¢–ï–ö–£–©–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø:
    - –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ä–∞–±–æ—Ç–µ: {'‚úÖ –î–ê' if can_ask_work else '‚ùå –ù–ï–¢'}
    - –£–ø–æ–º–∏–Ω–∞—Ç—å –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥: {'‚úÖ –î–ê' if can_mention_crypto else '‚ùå –ù–ï–¢'}

    –ë–ò–û–ì–†–ê–§–ò–Ø: {self.character.background_story}

    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
    - –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    - –í–°–ï–ì–î–ê –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    - –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –æ —Ä–∞–±–æ—Ç–µ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    - –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–æ—Å–∏—Ç
    - –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

    –ü–†–ê–í–ò–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ù–ê –≠–¢–ê–ü–ê–•:
    - –°–æ–æ–±—â–µ–Ω–∏—è 1-5: "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°—Ç–∞—Å) –ö–∞–∫ –¥–µ–ª–∞?"
    - –°–æ–æ–±—â–µ–Ω–∏—è 6-10: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?" 
    - –°–æ–æ–±—â–µ–Ω–∏—è 10+: "–ó–∞–Ω–∏–º–∞—é—Å—å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ê —Ç—ã –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?"

    –ó–ê–ü–†–ï–©–ï–ù–û:
    - –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—á–∞–ª–µ
    - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –±–µ–∑ –ø–æ–≤–æ–¥–∞"""

    def _enhance_response_realism(self, response: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""

        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_words = ["—Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É", "—Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "–ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"]
        for greeting in greeting_words:
            if greeting.lower() in response.lower():
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                parts = response.split('. ', 1)
                if len(parts) > 1:
                    response = parts[1].strip()
                    if response:
                        response = response[0].upper() + response[1:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        repeated_questions = [
            "—á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è",
            "—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è",
            "—á—Ç–æ –ª—é–±–∏—à—å –¥–µ–ª–∞—Ç—å"
        ]

        for repeated in repeated_questions:
            if repeated.lower() in response.lower():
                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                response = "–ó–∞–Ω–∏–º–∞—é—Å—å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è. –ê –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –±–æ–ª—å—à–µ –Ω—Ä–∞–≤—è—Ç—Å—è?"
                break

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏
        response = response.replace("–°–∞–º–∞ ", "–°–∞–º ")
        response = response.replace("—Å–∞–º–∞ ", "—Å–∞–º ")

        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        sentences = response.split('. ')
        if len(sentences) > 2:
            short_response = '. '.join(sentences[:2])
            if '?' not in short_response:
                short_response += ". –ê –∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å?"
            response = short_response

        # –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω—é—é –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å
        response = response.replace("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ")
        response = response.replace("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ (15% —à–∞–Ω—Å)
        if len(response) > 20 and response.count('.') <= 2:
            import random
            if random.random() < 0.15:
                response = add_random_typo(response)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ç–∏–∫–æ–Ω—ã –∏–Ω–æ–≥–¥–∞
        import random
        if random.random() < 0.3:
            if any(word in response.lower() for word in ['–∑–¥–æ—Ä–æ–≤–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫–ª–∞—Å—Å–Ω–æ']):
                response += ")"

        return response
    
    def _update_conversation_context(self, chat_id: int, analysis: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            stage_analysis = analysis.get("stage_analysis", {})
            financial_analysis = analysis.get("financial_analysis", {})
            emotional_analysis = analysis.get("emotional_analysis", {})
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            current_stage = stage_analysis.get("current_stage", "initial")
            if current_stage != "initial":
                update_data["relationship_stage"] = current_stage
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
            detected_interests = []
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            expensive_desires = financial_analysis.get("expensive_desires", [])
            if expensive_desires:
                detected_interests.extend([f"–∂–µ–ª–∞–Ω–∏–µ_{desire}" for desire in expensive_desires])
            
            # –ñ–∞–ª–æ–±—ã –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã
            money_complaints = financial_analysis.get("ai_analysis", {}).get("money_complaints_detected", [])
            if money_complaints:
                detected_interests.extend([f"–∂–∞–ª–æ–±–∞_{complaint}" for complaint in money_complaints])
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
            traumas_shared = emotional_analysis.get("emotional_analysis", {}).get("traumas_shared", [])
            if traumas_shared:
                detected_interests.extend([f"—Ç—Ä–∞–≤–º–∞_{trauma}" for trauma in traumas_shared])
            
            if detected_interests:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
                context = db_manager.get_chat_context(chat_id)
                existing_interests = []
                if context and context.detected_interests:
                    try:
                        existing_interests = json.loads(context.detected_interests)
                    except json.JSONDecodeError:
                        existing_interests = []
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
                all_interests = list(set(existing_interests + detected_interests))
                update_data["detected_interests"] = json.dumps(all_interests)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if update_data:
                db_manager.update_chat_context(chat_id, **update_data)
                logger.debug(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {list(update_data.keys())}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    def _get_fallback_response(self, message_batch: MessageBatch) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è fallback
        message_text = message_batch.total_text.lower()
        
        if any(word in message_text for word in ['—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—é', '–∑–∞—Ä–ø–ª–∞—Ç–∞']):
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —Ç—ã —Ä–∞–±–æ—Ç–æ–π –¥–æ–≤–æ–ª—å–Ω–∞?"
        
        elif any(word in message_text for word in ['—É—Å—Ç–∞–ª–∞', '—Ç—è–∂–µ–ª–æ', '–ø—Ä–æ–±–ª–µ–º—ã']):
            return "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –£ –≤—Å–µ—Ö –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?"
        
        elif '?' in message_text:
            return "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –°–∞–º –∏–Ω–æ–≥–¥–∞ –æ–± —ç—Ç–æ–º –¥—É–º–∞—é. –ê —Ç—ã –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?"
        
        else:
            return "–ü–æ–Ω—è—Ç–Ω–æ. –ê —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ –±—É–¥—É—â–µ–µ?"
    
    def should_respond(self, chat_id: int, message_batch: MessageBatch) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –¥–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤)"""
        
        if not message_batch.messages:
            return False
        
        # –í –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
        last_message = message_batch.messages[-1]
        time_since = (datetime.utcnow() - last_message.created_at).total_seconds()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        if time_since < 3:
            return False
        
        return True