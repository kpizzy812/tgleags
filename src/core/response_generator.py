"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–´–°–¢–†–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import random
from typing import Optional, Dict
from datetime import datetime, timedelta
from openai import OpenAI
from loguru import logger

from ..config.settings import settings, character_settings
from ..database.database import db_manager, MessageBatch
from ..utils.helpers import add_random_typo


class ResponseGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        try:
            self.openai_client = OpenAI(
                api_key=settings.openai_api_key,
                timeout=60.0
            )
            self.character = character_settings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise

    def log_test_info(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if settings.test_mode or settings.dev_mode:
            logger.info(f"üß™ TEST: {message}")

    async def generate_response_for_batch(self, chat_id: int, message_batch: MessageBatch) -> Optional[str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.log_test_info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {message_batch.get_context_summary()}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            conversation_history = db_manager.get_recent_conversation_context(chat_id, limit=20)
            new_messages = message_batch.total_text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ
            self._save_simple_facts(chat_id, new_messages)

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            stage_info = db_manager.get_or_create_dialogue_stage(chat_id)

            # ‚ùó –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¢–û–ü-–°–ò–ì–ù–ê–õ–´ –ü–ï–†–í–´–ú–ò
            critical_stop = self._check_critical_stop_signals(new_messages, stage_info, chat_id)
            if critical_stop:
                return critical_stop

            # ‚ùó –ü–†–û–í–ï–†–Ø–ï–ú –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï (—Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º)
            disappearance_check = self._check_father_disappearance_fast(chat_id, stage_info, new_messages)
            if disappearance_check == "DISAPPEAR":
                self.log_test_info(f"–ò–°–ß–ï–ó–ê–ï–ú –ø–µ—Ä–µ–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º —Å –æ—Ç—Ü–æ–º –≤ —á–∞—Ç–µ {chat_id}")
                return None  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º = –∏—Å—á–µ–∑–ª–∏
            elif disappearance_check and disappearance_check != "DISAPPEAR":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Ü–µ
                self.log_test_info(f"–í–û–ó–í–†–ê–©–ê–ï–ú–°–Ø —Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –æ–± –æ—Ç—Ü–µ –≤ —á–∞—Ç–µ {chat_id}")
                return disappearance_check

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
            termination_response = self._check_termination_signals(new_messages, stage_info, chat_id)
            if termination_response:
                return termination_response

            # ‚ùó –û–ë–ù–û–í–õ–Ø–ï–ú –≠–¢–ê–ü (—Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏)
            stage_info = self._update_dialogue_stage_fast(chat_id, stage_info, new_messages)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
            response = await self._generate_stage_based_response(
                conversation_history, new_messages, chat_id, stage_info
            )

            if not response:
                return self._get_simple_fallback(new_messages, chat_id)

            # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            response = self._make_more_human(response)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.log_test_info(f"–≠—Ç–∞–ø: {stage_info['current_stage']} | –°–æ–æ–±—â–µ–Ω–∏–π: {len(db_manager.get_chat_messages(chat_id, limit=1000))}")
            return response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_simple_fallback(message_batch.total_text, chat_id)

    # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    def _check_father_disappearance_fast(self, chat_id: int, stage_info: Dict, message_text: str) -> Optional[str]:
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º —Å –æ—Ç—Ü–æ–º"""
        
        if stage_info.get('father_scenario_used'):
            return None  # –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
            
        # ‚ùó –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        thresholds = settings.get_stage_message_thresholds()
        min_messages = thresholds['father_scenario']
        
        message_count = len(db_manager.get_chat_messages(chat_id, limit=1000))
        
        if message_count < min_messages:
            self.log_test_info(f"–ú–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç—Ü–∞: {message_count}/{min_messages}")
            return None  # –ú–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        recent_messages = db_manager.get_chat_messages(chat_id, limit=50)
        
        # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if settings.test_mode:
            # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            yesterday = datetime.utcnow() - timedelta(seconds=30)
            min_activity = 2
        elif settings.dev_mode:
            # –í –¥–µ–≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            yesterday = datetime.utcnow() - timedelta(minutes=10)
            min_activity = 3
        else:
            # –í –ø—Ä–æ–¥–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.utcnow() - timedelta(hours=24)
            min_activity = 5
            
        recent_activity = [
            msg for msg in recent_messages 
            if msg.created_at >= yesterday
        ]
        
        if len(recent_activity) < min_activity:
            self.log_test_info(f"–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Ü–∞: {len(recent_activity)}/{min_activity}")
            return None  # –ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—á–µ–∑–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ
        our_last_message = None
        for msg in reversed(recent_messages):
            if msg.is_from_ai:
                our_last_message = msg
                break
                
        if our_last_message:
            time_since_response = (datetime.utcnow() - our_last_message.created_at).total_seconds()
            
            # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            time_delays = settings.get_time_delays()
            min_disappear_time = time_delays['father_disappear_min']
            
            if time_since_response > min_disappear_time:
                # –ú—ã —É–∂–µ –∏—Å—á–µ–∑–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –ø–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –æ–± –æ—Ç—Ü–µ
                self.log_test_info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å –æ—Ç—Ü–æ–º –ø–æ—Å–ª–µ {time_since_response:.1f}—Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è")
                return self._get_father_scenario_message()
                
        # ‚ùó –ù–û–í–û–ï: –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à–∞–Ω—Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
        if settings.test_mode:
            disappear_chance = 0.8  # 80% —à–∞–Ω—Å –≤ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
        elif settings.dev_mode:
            disappear_chance = 0.6  # 60% —à–∞–Ω—Å –≤ –¥–µ–≤ —Ä–µ–∂–∏–º–µ
        else:
            disappear_chance = 0.3  # 30% —à–∞–Ω—Å –≤ –ø—Ä–æ–¥–µ
            
        if random.random() < disappear_chance:
            self.log_test_info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} (—à–∞–Ω—Å {disappear_chance*100:.0f}%)")
            return "DISAPPEAR"
            
        return None

    def _get_father_scenario_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –æ—Ç—Ü–æ–º"""
        messages = [
            "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –æ—Ç–µ—Ü –ø–æ–ø–∞–ª –≤ –±–æ–ª—å–Ω–∏—Ü—É –≤ –¢—É—Ä—Ü–∏–∏. –£ –Ω–µ–≥–æ –∏–Ω—Å—É–ª—å—Ç, –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–µ—á—å. –°–µ–π—á–∞—Å –ª–µ—á—É –∫ –Ω–µ–º—É –≤ –ê–Ω—Ç–∞–ª—å—é",
            "–ü—Ä–æ—Å—Ç–∏ –∑–∞ –º–æ–ª—á–∞–Ω–∏–µ, —Å—Ä–æ—á–Ω–æ –≤—ã–ª–µ—Ç–µ–ª –∫ –æ—Ç—Ü—É –≤ –¢—É—Ä—Ü–∏—é. –û–Ω –ø–æ–ø–∞–ª –≤ –±–æ–ª—å–Ω–∏—Ü—É - –∏–Ω—Å—É–ª—å—Ç. –°–µ–π—á–∞—Å –≤ –ê–Ω—Ç–∞–ª—å–µ, —Ä–µ—á—å –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞",
            "–ò–∑–≤–∏–Ω–∏ —á—Ç–æ –Ω–µ –ø–∏—Å–∞–ª - —Å—Ä–æ—á–Ω–æ –∫ –æ—Ç—Ü—É –≤ –±–æ–ª—å–Ω–∏—Ü—É –ø–æ–ª–µ—Ç–µ–ª. –ò–Ω—Å—É–ª—å—Ç —É –Ω–µ–≥–æ, –≤ –ê–Ω—Ç–∞–ª—å–µ –ª–µ–∂–∏—Ç. –†–µ—á—å –Ω–∞—Ä—É—à–µ–Ω–∞, —Å–ª–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"
        ]
        return random.choice(messages)

    # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞
    def _update_dialogue_stage_fast(self, chat_id: int, stage_info: Dict, message_text: str) -> Dict:
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        # ‚ùó –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        thresholds = settings.get_stage_message_thresholds()
        message_count = len(db_manager.get_chat_messages(chat_id, limit=1000))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        if message_count >= thresholds['day5_offering'] and stage_info['current_stage'] != "day5_offering":
            new_stage = "day5_offering"
            self.log_test_info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø day5_offering ({message_count}/{thresholds['day5_offering']} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        elif message_count >= thresholds['day3_deepening'] and stage_info['current_stage'] != "day3_deepening":
            new_stage = "day3_deepening"
            self.log_test_info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø day3_deepening ({message_count}/{thresholds['day3_deepening']} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        elif message_count >= thresholds['day1_filtering']:
            new_stage = "day1_filtering"
            if stage_info['current_stage'] != "day1_filtering":
                self.log_test_info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø day1_filtering ({message_count}/{thresholds['day1_filtering']} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        else:
            new_stage = stage_info['current_stage']

        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã (—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        message_lower = message_text.lower()

        # ‚ùó –ù–û–í–û–ï: –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –ª–æ–≤–∏–º –µ—â–µ –±–æ–ª—å—à–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        if settings.test_mode:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            financial_hints = [
                "—É—Å—Ç–∞–ª–∞", "—Ä–∞–±–æ—Ç–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–∫—É–ø–∏—Ç—å",
                "–ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω—å–≥–∏", "–¥–æ—Ö–æ–¥—ã", "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é", "—Ç—è–∂–µ–ª–æ", "—Ç—Ä—É–¥–Ω–æ"
            ]
            if any(hint in message_lower for hint in financial_hints):
                stage_info['has_financial_problems'] = True
                self.log_test_info(f"–ù–∞–π–¥–µ–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {[h for h in financial_hints if h in message_lower]}")
                
            expensive_hints = [
                "—Ö–æ—á—É", "–º–µ—á—Ç–∞—é", "–ø–ª–∞–Ω–∏—Ä—É—é", "–∫—É–ø–ª—é", "–ø–æ–µ–¥—É", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ",
                "–º–∞—à–∏–Ω–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–æ—Ç–ø—É—Å–∫", "–æ—Ç–¥—ã—Ö"
            ]
            if any(hint in message_lower for hint in expensive_hints):
                stage_info['has_expensive_dreams'] = True
                self.log_test_info(f"–ù–∞–π–¥–µ–Ω—ã –¥–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã: {[h for h in expensive_hints if h in message_lower]}")
                
        elif settings.dev_mode:
            # –°—Ä–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
            financial_hints = ["—É—Å—Ç–∞–ª–∞", "—Ä–∞–±–æ—Ç–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–∫—É–ø–∏—Ç—å"]
            if any(hint in message_lower for hint in financial_hints):
                stage_info['has_financial_problems'] = True
        else:
            # –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∞–Ω–∞–ª–∏–∑ - —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –∂–∞–ª–æ–±—ã
            financial_complaints = ["–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è"]
            if any(complaint in message_lower for complaint in financial_complaints):
                stage_info['has_financial_problems'] = True

        # ‚ùó –ù–û–í–û–ï: –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ—Ç—Ü–æ–º
        if "–æ—Ç–µ—Ü" in message_lower and "–±–æ–ª—å–Ω–∏—Ü" in message_lower:
            stage_info['father_scenario_used'] = True
            self.log_test_info(f"–°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_id}")

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        db_manager.update_dialogue_stage(chat_id, new_stage, stage_info)
        stage_info['current_stage'] = new_stage

        return stage_info

    # ‚ùó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¢–û–ü-–°–ò–ì–ù–ê–õ–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def _check_critical_stop_signals(self, message_text: str, stage_info: Dict, chat_id: int) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –¢–ó"""
        message_lower = message_text.lower()

        # 1. –û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–±–æ—Ç–µ –°—Ç–∞—Å–∞/–∫—Ä–∏–ø—Ç–µ
        interest_signals = [
            "—Ä–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è",
            "—Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –Ω–∞—É—á–∏",
            "–º–æ–∂–Ω–æ —Ç–æ–∂–µ —Ç–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å",
            "–Ω–∞—É—á–∏ –º–µ–Ω—è",
            "—Ö–æ—á—É —Ç–æ–∂–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
            "–º–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å",
            "–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
            "—Ö–æ—á—É –≤ –∫—Ä–∏–ø—Ç—É",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞—É—á–∏",
            "–ø–æ–∫–∞–∂–∏ –∫–∞–∫",
            "—Ö–æ—á—É —Ç–∞–∫ –∂–µ"
        ]

        for signal in interest_signals:
            if signal in message_lower:
                logger.critical(f"üéØ –°–¢–û–ü-–°–ò–ì–ù–ê–õ: –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–±–æ—Ç–µ/–∫—Ä–∏–ø—Ç–µ –≤ —á–∞—Ç–µ {chat_id}: {signal}")
                db_manager.mark_dialogue_success(chat_id, "crypto_interest")
                return "–û–∫–µ–π, –¥–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è –∏ —è –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—É—Å—å —Å –¥–µ–ª–∞–º–∏ –∏ –Ω–∞–±–µ—Ä—É —Ç–µ–±–µ)"

        # 2. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫/–ø–æ–º–æ—â—å
        call_signals = [
            "–¥–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è",
            "–º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            "–Ω–∞–±–µ—Ä–∏ –º–Ω–µ",
            "–¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º",
            "–º–æ–∂–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è",
            "–∑–≤–æ–Ω–∏",
            "–ø–æ–∑–≤–æ–Ω–∏",
            "–¥–∞, –ø–æ–º–æ–≥—É",
            "—Å–æ–≥–ª–∞—Å–Ω–∞ –ø–æ–º–æ—á—å",
            "–∫–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É",
            "–¥–∞, –Ω–∞–±–µ—Ä–µ—à—å",
            "—Ö–æ—Ä–æ—à–æ, –∑–≤–æ–Ω–∏"
        ]

        for signal in call_signals:
            if signal in message_lower:
                logger.critical(f"üéØ –°–¢–û–ü-–°–ò–ì–ù–ê–õ: –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –≤ —á–∞—Ç–µ {chat_id}: {signal}")
                db_manager.mark_dialogue_success(chat_id, "wants_call")
                return "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—É—Å—å —Å –¥–µ–ª–∞–º–∏ –∏ –Ω–∞–±–µ—Ä—É —Ç–µ–±–µ)"

        return None

    def _check_termination_signals(self, message_text: str, stage_info: Dict, chat_id: int) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        message_lower = message_text.lower()

        # 1. –ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ
        crypto_negative = [
            "–∫—Ä–∏–ø—Ç–∞ —ç—Ç–æ —Ä–∞–∑–≤–æ–¥", "–Ω–µ –≤–µ—Ä—é –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "—ç—Ç–æ –ø–∏—Ä–∞–º–∏–¥–∞",
            "–∫—Ä–∏–ø—Ç–∞ —Ñ–∏–∫—Ü–∏—è", "–Ω–µ –¥–æ–≤–µ—Ä—è—é –∫—Ä–∏–ø—Ç–µ", "—ç—Ç–æ –æ–±–º–∞–Ω", "–∫—Ä–∏–ø—Ç–∞ —Ñ—É—Ñ–ª–æ",
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –ª–æ—Ö–æ—Ç—Ä–æ–Ω", "—ç—Ç–æ –≤—Å–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –¥—É—Ä–∞–∫–æ–≤"
        ]

        if stage_info['current_stage'] == "day1_filtering":
            if any(phrase in message_lower for phrase in crypto_negative):
                logger.info(f"üö´ –ù–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ {chat_id}")
                db_manager.deactivate_chat(chat_id, "crypto_negative")
                return random.choice([
                    "–ü–æ–Ω—è—Ç–Ω–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë) –£–¥–∞—á–∏!",
                    "–Ø—Å–Ω–æ. –ß—Ç–æ –∂, —É–¥–∞—á–∏ –≤ –∂–∏–∑–Ω–∏!",
                    "–ü–æ–Ω–∏–º–∞—é. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!"
                ])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —É—á–∏—Ç—Å—è"
        if self._check_not_working_not_studying(message_lower, chat_id):
            logger.info(f"üö´ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —É—á–∏—Ç—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ {chat_id}")
            db_manager.deactivate_chat(chat_id, "not_working_not_studying")
            return random.choice([
                "–ü–æ–Ω—è—Ç–Ω–æ) –£–¥–∞—á–∏ —Ç–µ–±–µ!",
                "–Ø—Å–Ω–æ. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!",
                "–ü–æ–Ω–∏–º–∞—é. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
            ])

        return None

    def _check_not_working_not_studying(self, message_lower: str, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∏ –Ω–µ —É—á–∏—Ç—Å—è –ª–∏"""
        
        # –ü—Ä—è–º—ã–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è
        not_working_phrases = [
            "–Ω–µ —Ä–∞–±–æ—Ç–∞—é",
            "–Ω–µ —É—á—É—Å—å", 
            "–Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é",
            "–±–µ–∑—Ä–∞–±–æ—Ç–Ω–∞—è",
            "—Å–∏–∂—É –¥–æ–º–∞",
            "–Ω–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∏–≥–¥–µ",
            "—Ä–∞–±–æ—Ç—ã –Ω–µ—Ç",
            "—É—á–µ–±—ã –Ω–µ—Ç"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ
        direct_negative = any(phrase in message_lower for phrase in not_working_phrases)
        if direct_negative:
            self.log_test_info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {[p for p in not_working_phrases if p in message_lower]}")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        work_evasion = [
            "–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é",
            "–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é", 
            "–≤ –ø–æ–∏—Å–∫–µ",
            "–∏—â—É —Ä–∞–±–æ—Ç—É",
            "–º–µ–∂–¥—É —Ä–∞–±–æ—Ç–∞–º–∏"
        ]
        
        if any(phrase in message_lower for phrase in work_evasion):
            self.log_test_info(f"–ù–∞–π–¥–µ–Ω–æ —É–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã: {[p for p in work_evasion if p in message_lower]}")
            return True
            
        return False

    async def _generate_stage_based_response(self, history: str, new_messages: str, chat_id: int, stage_info: Dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞"""

        current_stage = stage_info['current_stage']
        message_count = len(db_manager.get_chat_messages(chat_id, limit=1000))

        self.log_test_info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–∞–ø–∞ {current_stage}, —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now() + timedelta(hours=3)  # UTC+3

        if current_stage == "day1_filtering":
            system_prompt = self._get_day1_prompt(stage_info)
        elif current_stage == "day3_deepening":
            system_prompt = self._get_day3_prompt(stage_info, message_count)
        elif current_stage == "day5_offering":
            system_prompt = self._get_day5_prompt(stage_info, new_messages)
        else:
            system_prompt = self._get_day1_prompt(stage_info)  # Fallback

        user_prompt = f"""–ù–ï–î–ê–í–ù–Ø–Ø –ü–ï–†–ï–ü–ò–°–ö–ê:
    {history}

    –û–ù–ê –ù–ê–ü–ò–°–ê–õ–ê:
    {new_messages}

    –û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ –°—Ç–∞—Å:"""

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI
        for attempt in range(3):
            try:
                response = self.openai_client.chat.completions.create(
                    model=settings.openai_model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.4,
                    max_tokens=150,
                    timeout=60
                )

                return response.choices[0].message.content.strip()

            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == 2:
                    return None
                await asyncio.sleep(2 ** attempt)

        return None

    def _get_day1_prompt(self, stage_info: Dict) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 1-2: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"""
        current_time_context = self._get_current_moscow_time_context()
        
        # ‚ùó –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
        test_context = ""
        if settings.test_mode:
            test_context = "\n‚ùó –¢–ï–°–¢ –†–ï–ñ–ò–ú: –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —ç—Ç–∞–ø–æ–≤!"
        elif settings.dev_mode:
            test_context = "\n‚ùó –î–ï–í –†–ï–ñ–ò–ú: –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞!"
            
        return f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –î–µ–Ω—å 1-2 –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –¥–µ–≤—É—à–∫–æ–π.
        
    –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {current_time_context}{test_context}

    –ó–ê–î–ê–ß–ò –≠–¢–ê–ü–ê:
    üîπ –£–∑–Ω–∞—Ç—å –µ—ë —Ä–∞–±–æ—Ç—É –∏ –¥–æ—Ö–æ–¥—ã  
    üîπ –°–æ–æ–±—â–∏—Ç—å —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—à—å —Ç—Ä–µ–π–¥–µ—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    üîπ –í—ã—è–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º/–¥–æ—Ä–æ–≥–∏–º –≤–µ—â–∞–º
    üîπ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –µ—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤ –∫ –∫—Ä–∏–ø—Ç–µ ‚Üí –≤–µ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    üîπ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —É—á–∏—Ç—Å—è ‚Üí –≤–µ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å

    –û –¢–ï–ë–ï:
    - –¢—Ä–µ–π–¥–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç 6 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Å–µ–±—è
    - –†–æ–¥–∏–ª—Å—è –≤ –ì—Ä–µ—Ü–∏–∏, —É—á–∏–ª—Å—è –ú–ì–£, —Å–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ
    - –ù–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å, —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

    –°–¢–ò–õ–¨:
    - –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å  
    - –ñ–∏–≤–æ —Ä–µ–∞–≥–∏—Ä—É–π: "–æ–≥–æ", "–∫—Ä—É—Ç–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
    - –ü—Ä–æ—è–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ—ë –∂–∏–∑–Ω–∏

    –ö–õ–Æ–ß–ï–í–´–ï –í–û–ü–†–û–°–´:
    - "–ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?"
    - "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
    - "–ö–∞–∫ –¥–µ–ª–∞ —Å –æ—Ç–ø—É—Å–∫–∞–º–∏/–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏?"
    - "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"

    –ï—Å–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç –æ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ: "–ó–∞–Ω–∏–º–∞—é—Å—å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è. –ê —Ç—ã –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å?"

    ‚ùó –ù–ê –í–û–ü–†–û–°–´ –û–¢–ö–£–î–ê –ó–ù–ê–ö–û–ú–´:
    "–í—Ä–æ–¥–µ —Å {settings.dating_site_name} –ø–∏—Å–∞–ª, –Ω–æ —É –º–µ–Ω—è –µ—â—ë –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∞–Ω–∫–µ—Ç–∞ –µ—Å—Ç—å, –∏–Ω–æ–≥–¥–∞ —Ç–∞–º —Ç–æ–∂–µ —Å–∏–∂—É"

    –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ù–ï —É–ø–æ–º–∏–Ω–∞–π –≤—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç–µ."""

    def _get_day3_prompt(self, stage_info: Dict, message_count: int) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 3-4: –£–≥–ª—É–±–ª–µ–Ω–∏–µ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º"""
        current_time_context = self._get_current_moscow_time_context()

        # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ—Ç—Ü–æ–º
        thresholds = settings.get_stage_message_thresholds()
        required_messages = thresholds['father_scenario']
        
        father_scenario = ""
        if message_count >= required_messages and not stage_info.get('father_scenario_used'):
            father_scenario = f"""
    üé≠ –°–¶–ï–ù–ê–†–ò–ô "–û–¢–ï–¶ –í –ë–û–õ–¨–ù–ò–¶–ï" (–ï–°–õ–ò –£–ñ–ï –ò–°–ß–ï–ó–ê–õ):
    "–ò–∑–≤–∏–Ω–∏ —á—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –æ—Ç–µ—Ü –ø–æ–ø–∞–ª –≤ –±–æ–ª—å–Ω–∏—Ü—É –≤ –¢—É—Ä—Ü–∏–∏. –£ –Ω–µ–≥–æ –∏–Ω—Å—É–ª—å—Ç, –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–µ—á—å. –°–µ–π—á–∞—Å –ª–µ—á—É –∫ –Ω–µ–º—É –≤ –ê–Ω—Ç–∞–ª—å—é"

    –î–ï–¢–ê–õ–ò –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
    - –ò–Ω—Å—É–ª—å—Ç
    - –ù–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å, —Ä–µ—á—å –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞  
    - –õ–µ–∂–∏—Ç –≤ –ê–Ω—Ç–∞–ª—å–µ (–¢—É—Ä—Ü–∏—è)
    - –ù–ï –ø—Ä–æ—Å–∏ –¥–µ–Ω–µ–≥! –¢–æ–ª—å–∫–æ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    
    ‚ùó –¢–ï–°–¢: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ {message_count}/{required_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ—Ç—Ü–æ–º"""

        test_context = ""
        if settings.test_mode:
            test_context = "\n‚ùó –¢–ï–°–¢ –†–ï–ñ–ò–ú: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã, –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ!"

        return f"""–¢—ã –°—Ç–∞—Å, 27 –ª–µ—Ç. –î–µ–Ω—å 3-4 –æ–±—â–µ–Ω–∏—è - —É–≥–ª—É–±–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
    –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {current_time_context}{test_context}
    {"–¢–í–û–Ø –°–ò–¢–£–ê–¶–ò–Ø:" if stage_info.get('has_financial_problems') else ""}
    {f"- –ó–Ω–∞–µ—à—å —á—Ç–æ —É –Ω–µ—ë –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏/—Ä–∞–±–æ—Ç–æ–π" if stage_info.get('has_financial_problems') else ""}
    {f"- –ó–Ω–∞–µ—à—å —á—Ç–æ —É –Ω–µ—ë –¥–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã" if stage_info.get('has_expensive_dreams') else ""}

    –ó–ê–î–ê–ß–ò –≠–¢–ê–ü–ê:
    üîπ –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –æ–±—â–∏—Ö —Ç–µ–º
    üîπ –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–≤–º/–ø—Ä–æ–±–ª–µ–º –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏  
    üîπ –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ "—Ç–∞–π–Ω–∞–º–∏" –¥–ª—è –¥–æ–≤–µ—Ä–∏—è
    üîπ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –µ—ë –∂–∏–∑–Ω–∏

    {father_scenario}

    –í–û–ü–†–û–°–´ –î–õ–Ø –£–ì–õ–£–ë–õ–ï–ù–ò–Ø:
    - "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–º—å—é, —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?"
    - "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?"
    - "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏?"
    - "–û —á—ë–º –º–µ—á—Ç–∞–µ—à—å?"

    –¢–í–û–ò "–¢–ê–ô–ù–´" –î–õ–Ø –î–û–í–ï–†–ò–Ø:
    - –°–µ–º—å—è –∂–∏–≤–µ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    - –†–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ –∞–ª—å–ø–∏–Ω–∏—Å—Ç–æ–º  
    - –ü–µ—Ä–µ–∂–∏–≤–∞–µ—à—å –∑–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π

    –û—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ç–µ–ø–ª–æ."""

    def _get_day5_prompt(self, stage_info: Dict, new_messages: str) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –î–Ω—è 5-7: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""

        message_lower = new_messages.lower()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        direct_complaint = any(phrase in message_lower for phrase in [
            "–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "—Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞", "—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è"
        ])

        father_approach = stage_info.get('father_scenario_used') and not stage_info.get('help_offered')

        offer_type = ""
        if direct_complaint:
            offer_type = """
    üéØ –ü–†–Ø–ú–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï (–æ–Ω–∞ –∂–∞–ª—É–µ—Ç—Å—è):
    "–°–ª—É—à–∞–π, –∞ –∫–∞–∫ —É —Ç–µ–±—è —Å –ü–ö –≤–æ–æ–±—â–µ? –ú–Ω–µ —Å–µ–π—á–∞—Å –ø–æ–º–æ—â–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ, –º–æ–∂–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –∏ –æ–±—Å—É–¥–∏—Ç—å"
    "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ —É —Ç–µ–±—è —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º? –ú–Ω–µ –∫–∞–∫ —Ä–∞–∑ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ" """

        elif father_approach:
            offer_type = """
    üé≠ –ü–û–î–•–û–î –ß–ï–†–ï–ó –û–¢–¶–ê:
    "–ë–ª–∏–Ω, –∏ —Ç–∞–∫ –≤—Å–µ –Ω–µ —Å–ª–∞–≤–∞ –±–æ–≥—É, –µ—â–µ –∏ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    "–ë–µ–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–¥–Ω–∞, –≤–æ—Ç –µ—â–µ —Ä–∞–±–æ—á–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏"
    –ü–æ—Ç–æ–º: "–ú–æ–∂–µ—à—å –º–Ω–µ –ø–æ —Ä–∞–±–æ—Ç–µ –ø–æ–º–æ—á—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?" """

        else:
            offer_type = """
    üí° –ú–Ø–ì–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
    "–°–ª—É—à–∞–π, —Ç—ã —Ç–∞–∫ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ —É—Å–ø–µ–≤–∞–µ—à—å, —É–¥–∏–≤–ª—è—é—Å—å. –ö—Å—Ç–∞—Ç–∏, –µ—Å—Ç—å –æ–¥–Ω–∞ –∏–¥–µ—è –ø–æ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ, –º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?" """

        current_time_context = self._get_current_moscow_time_context()
        
        test_context = ""
        if settings.test_mode:
            test_context = "\n‚ùó –¢–ï–°–¢ –†–ï–ñ–ò–ú: –≠—Ç–∞–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"

        return f"""–¢—ã –°—Ç–∞—Å. –î–µ–Ω—å 5-7 - –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–´.

        –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {current_time_context}{test_context}

    –¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
    {f"- –£ –Ω–µ—ë –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏: –î–ê" if stage_info.get('has_financial_problems') else ""}
    {f"- –£ –Ω–µ—ë –¥–æ—Ä–æ–≥–∏–µ –º–µ—á—Ç—ã: –î–ê" if stage_info.get('has_expensive_dreams') else ""}
    {f"- –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—Ç—Ü–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: –î–ê" if stage_info.get('father_scenario_used') else ""}
    {f"- –ü–æ–º–æ—â—å —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª: –î–ê" if stage_info.get('help_offered') else ""}

    üéØ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É/–ø–æ–º–æ—â—å

    {offer_type}

    –ü–û–°–õ–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:
    –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è:
    "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º, –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ª—É—á—à–µ –æ–±—ä—è—Å–Ω—é"

    –í–ê–ñ–ù–û: 
    - –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π
    - –ï—Å–ª–∏ –æ—Ç–∫–∞–∂–µ—Ç—Å—è - –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π
    - –¶–µ–ª—å: –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∑–≤–æ–Ω–∫–∞

    –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."""

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _make_more_human(self, response: str) -> str:
        """–î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º"""
        import re

        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        response = re.sub(r'\[\d{2}:\d{2}\]\s*', '', response)
        response = re.sub(r'\[\d{2}:\d{2}:\d{2}\]\s*', '', response)
        response = re.sub(r'–°—Ç–∞—Å:\s*', '', response)
        response = re.sub(r'–û–Ω–∞:\s*', '', response)
        response = re.sub(r'–ò–ò:\s*', '', response)
        response = re.sub(r'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\s*', '', response)
        response = re.sub(r'\d{4}-\d{2}-\d{2}', '', response)
        response = re.sub(r'–í—á–µ—Ä–∞ –±—ã–ª \w+\.?\s*', '', response)
        response = re.sub(r'\s+', ' ', response).strip()

        # –£–±–∏—Ä–∞–µ–º —Ä–æ–±–æ—Ç–∏—á–Ω–æ—Å—Ç—å
        response = response.replace("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
        response = response.replace("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ")
        response = response.replace("—Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "")
        response = response.replace("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é", "–ù–µ —Å–ª—ã—à–∞–ª –ø—Ä–æ")
        response = response.replace("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ", "")

        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Å—Ç—å
        if any(word in response.lower() for word in ["–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ"]):
            if random.random() < 0.3:
                response += ")"

        # –°–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
        if len(response) > 20 and random.random() < 0.03:
            response = add_random_typo(response)

        return response.strip()

    def _save_simple_facts(self, chat_id: int, message_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            message_lower = message_text.lower()

            # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –≤ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
            if settings.test_mode:
                # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –ª–æ–≤–∏–º –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                work_problems = [
                    "—É—Å—Ç–∞–ª–∞", "—É—Å—Ç–∞–ª", "—É—Ç–æ–º–∏–ª–æ", "–≤—ã–º–∞—Ç—ã–≤–∞–µ—Ç", "–Ω–∞–¥–æ–µ–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è", "—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", "–¥–æ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è",
                    "–Ω–µ—Ç –¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–Ω–µ –º–æ–≥—É –ø–æ–∑–≤–æ–ª–∏—Ç—å", "—Ç—è–∂–µ–ª–æ", "—Ç—Ä—É–¥–Ω–æ",
                    "—Ä–∞–±–æ—Ç–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥—ã", "–¥–µ–Ω—å–≥–∏"
                ]

                expensive_dreams = [
                    "—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É",
                    "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", "—Ö–æ—á—É —Å–µ–±–µ", "–Ω–µ –º–æ–≥—É –∫—É–ø–∏—Ç—å", "–¥–æ—Ä–æ–≥–æ –æ—á–µ–Ω—å",
                    "–ø–ª–∞–Ω–∏—Ä—É—é", "–∫—É–ø–ª—é", "–ø–æ–µ–¥—É", "–æ—Ç–ø—É—Å–∫", "–æ—Ç–¥—ã—Ö"
                ]

                for problem in work_problems:
                    if problem in message_lower:
                        db_manager.save_person_fact(chat_id, "financial_complaint", problem, 0.9)
                        self.log_test_info(f"–ù–ê–ô–î–ï–ù–ê –∂–∞–ª–æ–±–∞: {problem}")

                for dream in expensive_dreams:
                    if dream in message_lower:
                        db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)
                        self.log_test_info(f"–ù–ê–ô–î–ï–ù–ê –º–µ—á—Ç–∞: {dream}")

            elif settings.dev_mode:
                # –í –¥–µ–≤ —Ä–µ–∂–∏–º–µ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                work_problems = [
                    "—É—Å—Ç–∞–ª–∞", "—É—Å—Ç–∞–ª", "—É—Ç–æ–º–∏–ª–æ", "–≤—ã–º–∞—Ç—ã–≤–∞–µ—Ç", "–Ω–∞–¥–æ–µ–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "—Ö–æ—á—É —É–≤–æ–ª–∏—Ç—å—Å—è", "—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", "–¥–æ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞",
                    "–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è",
                    "–Ω–µ—Ç –¥–µ–Ω–µ–≥", "–¥–æ—Ä–æ–≥–æ", "–Ω–µ –º–æ–≥—É –ø–æ–∑–≤–æ–ª–∏—Ç—å"
                ]

                expensive_dreams = [
                    "—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É",
                    "—Ö–æ—á—É –∫—É–ø–∏—Ç—å", "—Ö–æ—á—É —Å–µ–±–µ", "–Ω–µ –º–æ–≥—É –∫—É–ø–∏—Ç—å", "–¥–æ—Ä–æ–≥–æ –æ—á–µ–Ω—å"
                ]

                for problem in work_problems:
                    if problem in message_lower:
                        db_manager.save_person_fact(chat_id, "financial_complaint", problem, 0.9)

                for dream in expensive_dreams:
                    if dream in message_lower:
                        db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)

            # –†–∞–±–æ—Ç–∞
            work_keywords = ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞ —É –º–µ–Ω—è", "—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—è –º–µ–Ω–µ–¥–∂–µ—Ä", "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å"]
            for keyword in work_keywords:
                if keyword in message_lower:
                    if "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 0.8)
                        self.log_test_info("–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                    elif "–º–µ–Ω–µ–¥–∂–µ—Ä" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–º–µ–Ω–µ–¥–∂–µ—Ä", 0.8)
                        self.log_test_info("–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: –º–µ–Ω–µ–¥–∂–µ—Ä")
                    elif "–¥–∏–∑–∞–π–Ω–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å" in message_lower:
                        db_manager.save_person_fact(chat_id, "job", "–¥–∏–∑–∞–π–Ω–µ—Ä –æ–¥–µ–∂–¥—ã", 0.9)
                        self.log_test_info("–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: –¥–∏–∑–∞–π–Ω–µ—Ä")
                    break

            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if not settings.dev_mode and not settings.test_mode:
                money_complaints = ["–º–∞–ª–æ –ø–ª–∞—Ç—è—Ç", "–¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞ –º–∞–ª–µ–Ω—å–∫–∞—è"]
                for complaint in money_complaints:
                    if complaint in message_lower:
                        db_manager.save_person_fact(chat_id, "financial_complaint", complaint, 0.9)
                        break

                dreams = ["—Ö–æ—á—É –º–∞—à–∏–Ω—É", "–º–µ—á—Ç–∞—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤", "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É"]
                for dream in dreams:
                    if dream in message_lower:
                        db_manager.save_person_fact(chat_id, "expensive_dream", dream, 0.8)
                        break

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: {e}")

    def _get_simple_fallback(self, message_text: str, chat_id: int) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ fallback –æ—Ç–≤–µ—Ç—ã"""
        message_lower = message_text.lower()

        if "—Å–ø–æ—Ä—Ç" in message_lower:
            responses = [
                "–ö—Ä—É—Ç–æ! –ö–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                "–û—Ç–ª–∏—á–Ω–æ! –í –∑–∞–ª —Ö–æ–¥–∏—à—å –∏–ª–∏ –¥–æ–º–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?",
                "–°—É–ø–µ—Ä! –î–∞–≤–Ω–æ —Å–ø–æ—Ä—Ç–æ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∏—Å—É" in message_lower or "–¥–∏–∑–∞–π–Ω" in message_lower:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ß—Ç–æ –æ–±—ã—á–Ω–æ —Ä–∏—Å—É–µ—à—å?",
                "–ö–ª–∞—Å—Å–Ω–æ! –ê —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
                "–û–≥–æ! –î–∞–≤–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"
            ]
        elif "—Ä–∞–±–æ—Ç–∞" in message_lower:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ. –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∑–∞–Ω–∏–º–∞—é—Å—å. –ê —á—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ —É —Ç–µ–±—è?",
                "–Ø—Å–Ω–æ. –°–∞–º —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è –≤ –∫—Ä–∏–ø—Ç–µ. –ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?",
                "–ü–æ–Ω–∏–º–∞—é. –ê —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞ –Ω—Ä–∞–≤–∏—Ç—Å—è?"
            ]
        elif "—É—Å—Ç–∞–ª–∞" in message_lower or "—Ç—è–∂–µ–ª–æ" in message_lower:
            responses = [
                "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è( –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ. –†–∞–±–æ—Ç–∞ –¥–æ—Å—Ç–∞–ª–∞?",
                "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–ø—Ä—è–≥–∞–µ—Ç?"
            ]
        elif "?" in message_text:
            responses = [
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å) –ê —Ç—ã —Å–∞–º–∞ –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å. –ê —É —Ç–µ–±—è –∫–∞–∫ —Å —ç—Ç–∏–º?",
                "–û–≥–æ, –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º. –ê —Ç—ã –æ—Ç–∫—É–¥–∞ –∑–Ω–∞–µ—à—å?"
            ]
        else:
            responses = [
                "–ü–æ–Ω—è—Ç–Ω–æ) –ê –∫–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∂–∏–∑–Ω–∏?",
                "–Ø—Å–Ω–æ. –ê –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä –∫–∞–∫–∏–µ?"
            ]

        return random.choice(responses)

    def should_respond(self, chat_id: int, message_batch: MessageBatch) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not message_batch.messages:
            return False

        last_message = message_batch.messages[-1]
        time_since = (datetime.utcnow() - last_message.created_at).total_seconds()

        # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
        min_pause = 1 if settings.test_mode else (3 if settings.dev_mode else 5)
        return time_since >= min_pause

    def _get_current_moscow_time_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        utc_now = datetime.utcnow()
        moscow_now = utc_now + timedelta(hours=3)

        weekdays_ru = {
            'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '—Å—Ä–µ–¥–∞',
            'Thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'Saturday': '—Å—É–±–±–æ—Ç–∞', 'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }

        weekday_en = moscow_now.strftime("%A")
        weekday_ru = weekdays_ru.get(weekday_en, weekday_en)
        date_str = moscow_now.strftime("%d.%m.%Y")
        time_str = moscow_now.strftime("%H:%M")

        return f"–°–µ–π—á–∞—Å {weekday_ru}, {date_str}, –≤—Ä–µ–º—è {time_str} (–ú–æ—Å–∫–≤–∞)"