"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π - —Ñ–æ–∫—É—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
"""
import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from loguru import logger

from ..config.settings import settings
from ..database.database import db_manager, MessageBatch
from ..database.models import Chat
from .telegram_client import TelegramAIClient
from .response_generator import ResponseGenerator


class MessageMonitor:
    """–ü—Ä–æ—Å—Ç–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.telegram_client = TelegramAIClient()
        self.response_generator = ResponseGenerator()
        self.is_monitoring = False

        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.last_processed_message_ids: Dict[int, int] = {}

        # –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
        self.response_queue: List[Dict] = []

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'processed_chats': 0,
            'sent_responses': 0,
            'failed_responses': 0
        }

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            if not await self.telegram_client.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
                return False

            if not await self.telegram_client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._init_last_processed()

            self.is_monitoring = True
            logger.info("üöÄ –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {self.response_generator.character.name}")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._simple_monitoring_loop()

            return True

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if self.telegram_client:
                await self.telegram_client.stop_monitoring()
            logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        await self.telegram_client.stop_monitoring()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _init_last_processed(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            active_chats = db_manager.get_active_chats()

            for chat in active_chats:
                last_id = db_manager.get_last_processed_message_id(chat.id)
                self.last_processed_message_ids[chat.id] = last_id

            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    async def _simple_monitoring_loop(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"–ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {settings.monitor_interval} —Å–µ–∫—É–Ω–¥")

        while self.is_monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if not await self.telegram_client.ensure_connection():
                    logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º...")
                    await asyncio.sleep(settings.monitor_interval * 2)
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                await self._send_ready_responses()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._check_new_messages()

                # –ü–∞—É–∑–∞
                await asyncio.sleep(settings.monitor_interval)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(settings.monitor_interval)

    async def _check_new_messages(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            active_chats = db_manager.get_active_chats()

            for chat in active_chats:
                await self._process_chat_simple(chat)

            self.stats['processed_chats'] = len(active_chats)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _process_chat_simple(self, chat):
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π"""
        try:
            chat_id = chat.id
            last_processed_id = self.last_processed_message_ids.get(chat_id, 0)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_batch = db_manager.get_unprocessed_user_messages(
                chat_id=chat_id,
                last_processed_id=last_processed_id,
                time_window_seconds=60
            )

            if not message_batch.messages:
                return

            # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–¢ –õ–ò –£–ñ–ï –û–¢–í–ï–¢–ê –í –û–ß–ï–†–ï–î–ò
            pending_response = None
            for i, response in enumerate(self.response_queue):
                if response['chat_id'] == chat_id:
                    pending_response = response
                    pending_index = i
                    break

            if pending_response:
                # –ï–°–õ–ò –ï–°–¢–¨ –ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –û–¢–í–ï–¢
                logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                self.response_queue.pop(pending_index)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
                response_text = await self.response_generator.generate_response_for_batch(
                    chat_id, message_batch
                )

                if response_text:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–º–µ–Ω—å—à–µ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∂–¥–∞–ª–∏)
                    delay = self._calculate_natural_delay(message_batch, chat_id) // 2  # –í–¥–≤–æ–µ –º–µ–Ω—å—à–µ
                    send_time = datetime.utcnow() + timedelta(seconds=delay)

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    self.response_queue.append({
                        'chat_id': chat_id,
                        'telegram_user_id': chat.telegram_user_id,
                        'message_text': response_text,
                        'send_time': send_time,
                        'message_batch': message_batch
                    })

                    logger.info(f"üîÑ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay}—Å")

                # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                self.last_processed_message_ids[chat_id] = message_batch.messages[-1].id
                return

            # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï –û–¢–í–ï–ß–ê–õ–ò –õ–ò –ú–´ –ù–ï–î–ê–í–ù–û
            recent_messages = db_manager.get_chat_messages(chat_id, limit=5)
            if recent_messages and recent_messages[-1].is_from_ai:
                time_since_our_response = (datetime.utcnow() - recent_messages[-1].created_at).total_seconds()
                if time_since_our_response < 300:  # 5 –º–∏–Ω—É—Ç
                    logger.debug(f"–ù–µ–¥–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–ª–∏ –≤ —á–∞—Ç {chat_id}, –∂–¥–µ–º")
                    return

            logger.info(f"üì¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {len(message_batch.messages)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
            if not self.response_generator.should_respond(chat_id, message_batch):
                return

            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
            response_text = await self.response_generator.generate_response_for_batch(
                chat_id, message_batch
            )

            if not response_text:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delay = self._calculate_natural_delay(message_batch, chat_id)
            send_time = datetime.utcnow() + timedelta(seconds=delay)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.response_queue.append({
                'chat_id': chat_id,
                'telegram_user_id': chat.telegram_user_id,
                'message_text': response_text,
                'send_time': send_time,
                'message_batch': message_batch
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            self.last_processed_message_ids[chat_id] = message_batch.messages[-1].id

            logger.info(f"üìÖ –û—Ç–≤–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ {delay}—Å")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat.id}: {e}")

    def _calculate_natural_delay(self, message_batch: MessageBatch, chat_id: int) -> int:
        """–†–∞—Å—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–æ–≤"""

        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = random.randint(8, 25)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        current_hour = datetime.now().hour
        if 0 <= current_hour < 7:      # –ù–æ—á—å - –¥–æ–ª—å—à–µ
            base_delay *= 2
        elif 9 <= current_hour < 18:   # –†–∞–±–æ—á–∏–π –¥–µ–Ω—å - –±—ã—Å—Ç—Ä–µ–µ
            base_delay *= 0.8
        elif 22 <= current_hour < 24:  # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä - –¥–æ–ª—å—à–µ
            base_delay *= 1.5

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_length = len(message_batch.total_text)
        if message_length > 100:
            base_delay += random.randint(5, 15)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(message_batch.messages) > 1:
            base_delay += len(message_batch.messages) * 3

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
        try:
            facts = db_manager.get_person_facts(chat_id)
            fact_count = len(facts)

            if fact_count >= 3:  # –ó–Ω–∞–µ–º –º–Ω–æ–≥–æ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ - –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—á–∞–µ–º
                base_delay *= 0.7
            elif fact_count == 0:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–º–∏–º—Å—è - –º–µ–¥–ª–µ–Ω–Ω–µ–µ
                base_delay *= 1.3
        except Exception:
            pass

        # –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        randomness = random.uniform(0.7, 1.3)
        final_delay = int(base_delay * randomness)

        return max(5, min(final_delay, 180))  # –û—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 3 –º–∏–Ω—É—Ç

    async def _send_ready_responses(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        current_time = datetime.utcnow()

        if self.response_queue:
            logger.debug(
                f"üïê –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å ({len(self.response_queue)} –æ—Ç–≤–µ—Ç–æ–≤). –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')}")
            for i, response in enumerate(self.response_queue):
                time_diff = (response['send_time'] - current_time).total_seconds()
                logger.debug(
                    f"   {i + 1}. –ß–∞—Ç {response['chat_id']}: {'–≥–æ—Ç–æ–≤' if time_diff <= 0 else f'—á–µ—Ä–µ–∑ {time_diff:.0f}—Å'}")

        ready_responses = []
        remaining_responses = []

        for response in self.response_queue:
            if response['send_time'] <= current_time:
                ready_responses.append(response)
            else:
                remaining_responses.append(response)

        self.response_queue = remaining_responses

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ
        for response in ready_responses:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {response['chat_id']}")
            await self._send_response_naturally(response)

    async def _send_response_naturally(self, response: Dict):
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            chat_id = response['chat_id']
            telegram_user_id = response['telegram_user_id']
            message_text = response['message_text']
            message_batch = response['message_batch']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.telegram_client.ensure_connection():
                logger.error(f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}")
                self.stats['failed_responses'] += 1
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º (—Å –ø—Ä–æ—á—Ç–µ–Ω–∏–µ–º –∏ typing –≤–Ω—É—Ç—Ä–∏)
            success = await self.telegram_client.send_message(
                telegram_user_id, message_text
            )

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                db_manager.add_message(
                    chat_id=chat_id,
                    text=message_text,
                    is_from_ai=True
                )

                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                db_manager.mark_messages_as_processed(message_batch)

                self.stats['sent_responses'] += 1
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            else:
                self.stats['failed_responses'] += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            self.stats['failed_responses'] += 1

    async def send_manual_message(self, user_id: int, message: str) -> bool:
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not await self.telegram_client.ensure_connection():
                return False

            success = await self.telegram_client.send_message(user_id, message)

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                chat = db_manager.get_or_create_chat(telegram_user_id=user_id)
                db_manager.add_message(
                    chat_id=chat.id,
                    text=message,
                    is_from_ai=True
                )

                logger.info(f"‚úÖ –†—É—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")

            return success

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        telegram_status = self.telegram_client.get_status()

        return {
            'monitoring': self.is_monitoring,
            'telegram_connected': telegram_status['connected'],
            'response_queue_size': len(self.response_queue),
            'active_chats': len(db_manager.get_active_chats()),
            'stats': self.stats.copy(),
            'telegram_stats': telegram_status.get('stats', {})
        }

    async def get_dialogs(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self.telegram_client.ensure_connection():
            return []

        return await self.telegram_client.get_dialogs()

    def get_queue_info(self) -> List[Dict[str, Any]]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        queue_info = []
        current_time = datetime.utcnow()

        for response in sorted(self.response_queue, key=lambda x: x['send_time']):
            time_to_send = (response['send_time'] - current_time).total_seconds()
            queue_info.append({
                'chat_id': response['chat_id'],
                'message_preview': response['message_text'][:50] + "...",
                'time_to_send_seconds': max(0, time_to_send),
                'delay_reason': 'natural_timing'
            })

        return queue_info