"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–´–°–¢–†–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from loguru import logger

from ..config.settings import settings
from ..database.database import db_manager, MessageBatch
from ..database.models import Chat
from .telegram_client import TelegramAIClient
from .response_generator import ResponseGenerator


class MessageMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.telegram_client = TelegramAIClient()
        self.response_generator = ResponseGenerator()
        self.is_monitoring = False

        # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.last_processed_message_ids: Dict[int, int] = {}

        # –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
        self.response_queue: List[Dict] = []

        # ‚ùó –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫—É)
        self.stopped_chats: set = set()

        # ‚ùó –ù–û–í–û–ï: –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        self.test_start_time = datetime.utcnow()
        self.virtual_time_offset = 0  # –°–µ–∫—É–Ω–¥—ã –æ—Ç —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'processed_chats': 0,
            'sent_responses': 0,
            'failed_responses': 0,
            'transferred_to_human': 0,
            'initiative_messages': 0
        }

    # ‚ùó –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    def get_current_time(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ä–µ–∞–ª—å–Ω–æ–µ –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
        if settings.test_mode:
            # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –≤—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ
            multiplier = settings.get_time_multiplier()
            real_elapsed = (datetime.utcnow() - self.test_start_time).total_seconds()
            virtual_elapsed = real_elapsed * multiplier
            return self.test_start_time + timedelta(seconds=virtual_elapsed)
        else:
            return datetime.utcnow()

    def get_moscow_time(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (—Ä–µ–∞–ª—å–Ω–æ–µ –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ)"""
        current = self.get_current_time()
        return current + timedelta(hours=3)  # UTC+3

    def log_test_info(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if settings.test_mode or settings.dev_mode:
            moscow_time = self.get_moscow_time()
            logger.info(f"üß™ TEST [{moscow_time.strftime('%H:%M:%S')}]: {message}")

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–æ–º"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            if not await self.telegram_client.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
                return False

            if not await self.telegram_client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._init_last_processed()
            await self._load_stopped_chats()

            # ‚ùó –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç —Ä–µ–∂–∏–º
            if settings.test_mode:
                self.test_start_time = datetime.utcnow()
                logger.critical("üß™ –ó–ê–ü–£–©–ï–ù TEST_MODE - –≤—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ –≤ 3600 —Ä–∞–∑!")
                logger.critical("üß™ 1 —á–∞—Å = 1 —Å–µ–∫—É–Ω–¥–∞, –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –∑–∞ 5-10 –º–∏–Ω—É—Ç!")
            elif settings.dev_mode:
                logger.warning("‚ö° –ó–ê–ü–£–©–ï–ù DEV_MODE - –≤—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ –≤ 60 —Ä–∞–∑!")

            self.is_monitoring = True
            logger.info("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {self.response_generator.character.name}")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._simple_monitoring_loop()

            return True

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if self.telegram_client:
                await self.telegram_client.stop_monitoring()
            logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        await self.telegram_client.stop_monitoring()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _load_stopped_chats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫—É"""
        try:
            from ..database.models import DialogueStage
            with db_manager.get_session() as session:
                stopped_stages = session.query(DialogueStage).filter(
                    DialogueStage.dialogue_stopped == True
                ).all()
                
                for stage in stopped_stages:
                    self.stopped_chats.add(stage.chat_id)
                    
                logger.info(f"üìµ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.stopped_chats)} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")

    async def _init_last_processed(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            active_chats = db_manager.get_active_chats()

            for chat in active_chats:
                last_id = db_manager.get_last_processed_message_id(chat.id)
                self.last_processed_message_ids[chat.id] = last_id

            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    async def _simple_monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–∞"""
        interval = settings.monitor_interval
        if settings.test_mode:
            interval = 2  # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        elif settings.dev_mode:
            interval = 5  # –í –¥–µ–≤ —Ä–µ–∂–∏–º–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
        logger.info(f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")

        while self.is_monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if not await self.telegram_client.ensure_connection():
                    logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º...")
                    await asyncio.sleep(interval * 2)
                    continue

                # ‚ùó –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏)
                await self._check_initiative_messages_fast()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                await self._send_ready_responses()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._check_new_messages()

                # –ü–∞—É–∑–∞
                await asyncio.sleep(interval)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(interval)

    # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def _check_initiative_messages_fast(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–∞"""
        try:
            current_time = self.get_current_time()
            moscow_time = self.get_moscow_time()
            current_hour = moscow_time.hour
            
            active_chats = db_manager.get_active_chats()
            
            for chat in active_chats:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
                if chat.id in self.stopped_chats:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._check_morning_greeting_fast(chat, current_hour, moscow_time)
                await self._check_evening_greeting_fast(chat, current_hour, moscow_time)
                await self._check_are_you_busy_fast(chat, current_time)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _check_morning_greeting_fast(self, chat: Chat, current_hour: int, moscow_time: datetime):
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        try:
            # ‚ùó –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–∞
            if not settings.is_test_morning_time(current_hour):
                return
                
            self.log_test_info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat.id} (—á–∞—Å: {current_hour})")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            if settings.test_mode:
                # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ "–¥–µ–Ω—å" = –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–µ–∫—É–Ω–¥
                today_start = moscow_time - timedelta(seconds=60)
            else:
                today_start = moscow_time.replace(hour=0, minute=0, second=0, microsecond=0)
            
            recent_messages = db_manager.get_chat_messages(chat.id, limit=20)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ "—Å–µ–≥–æ–¥–Ω—è"
            today_messages = [
                msg for msg in recent_messages 
                if msg.created_at >= today_start - timedelta(hours=3)  # –£—á–∏—Ç—ã–≤–∞–µ–º UTC
            ]
            
            if not today_messages:
                # –ù–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª —Å–µ–≥–æ–¥–Ω—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                greetings = [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ –¥–µ–ª–∞?",
                    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?", 
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ) –ü–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å –∫–∞–∫–∏–µ?",
                    "–£—Ç—Ä–æ! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
                ]
                
                message = random.choice(greetings)
                await self._send_initiative_message_fast(chat, message, "morning_greeting")
                self.log_test_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç {chat.id}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–∏—Å–∞–ª–∞ –ª–∏ –æ–Ω–∞ –ø–µ—Ä–≤–æ–π —Å–µ–≥–æ–¥–Ω—è
            first_today = today_messages[0] if today_messages else None
            if first_today and not first_today.is_from_ai:
                # –û–Ω–∞ –ø–∏—Å–∞–ª–∞ –ø–µ—Ä–≤–æ–π - –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º—Å—è
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            ai_messages_today = [msg for msg in today_messages if msg.is_from_ai]
            morning_greetings = [
                msg for msg in ai_messages_today 
                if any(word in (msg.text or "").lower() for word in ["—É—Ç—Ä–æ", "–¥–æ–±—Ä–æ–µ", "–ø—Ä–∏–≤–µ—Ç"])
            ]
            
            if not morning_greetings:
                greetings = [
                    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ –¥–µ–ª–∞?",
                    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è?",
                    "–£—Ç—Ä–æ) –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å?"
                ]
                
                message = random.choice(greetings)
                await self._send_initiative_message_fast(chat, message, "morning_greeting")
                self.log_test_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç {chat.id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}")

    async def _check_evening_greeting_fast(self, chat: Chat, current_hour: int, moscow_time: datetime):
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        try:
            # ‚ùó –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–∞
            if not settings.is_test_evening_time(current_hour):
                return
                
            self.log_test_info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat.id} (—á–∞—Å: {current_hour})")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            if settings.test_mode:
                today_start = moscow_time - timedelta(seconds=60)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–µ–∫—É–Ω–¥
            else:
                today_start = moscow_time.replace(hour=0, minute=0, second=0, microsecond=0)
            
            recent_messages = db_manager.get_chat_messages(chat.id, limit=20)
            today_messages = [
                msg for msg in recent_messages 
                if msg.created_at >= today_start - timedelta(hours=3)
            ]
            
            min_messages = 2 if settings.test_mode else 3
            if len(today_messages) < min_messages:
                return  # –ù–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            ai_messages_today = [msg for msg in today_messages if msg.is_from_ai]
            evening_greetings = [
                msg for msg in ai_messages_today 
                if any(word in (msg.text or "").lower() for word in ["—Å–ø–æ–∫–æ–π–Ω–æ–π", "–Ω–æ—á–∏", "—Å–ª–∞–¥–∫–∏—Ö"])
            ]
            
            if not evening_greetings:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –Ω–∞—Å –Ω–µ–¥–∞–≤–Ω–æ
                last_message = recent_messages[-1] if recent_messages else None
                if last_message and last_message.is_from_ai:
                    time_delays = settings.get_time_delays()
                    min_gap = time_delays['initiative_min_delay']
                    
                    time_since_last = (self.get_current_time() - last_message.created_at).total_seconds()
                    if time_since_last < min_gap:
                        return
                
                greetings = [
                    "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏) –°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!",
                    "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –î–æ –∑–∞–≤—Ç—Ä–∞)",
                    "–ù–æ—á–∏) –û—Ç–¥—ã—Ö–∞–π —Ö–æ—Ä–æ—à–æ!"
                ]
                
                message = random.choice(greetings)
                await self._send_initiative_message_fast(chat, message, "evening_greeting")
                self.log_test_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç {chat.id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}")

    async def _check_are_you_busy_fast(self, chat: Chat, current_time: datetime):
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ '–ó–∞–Ω—è—Ç–∞?'"""
        try:
            recent_messages = db_manager.get_chat_messages(chat.id, limit=10)
            if not recent_messages:
                return
                
            last_message = recent_messages[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—Å —Å –≤–æ–ø—Ä–æ—Å–æ–º
            if not last_message.is_from_ai or not last_message.text:
                return
                
            if '?' not in last_message.text:
                return  # –ù–µ –±—ã–ª –≤–æ–ø—Ä–æ—Å
                
            # ‚ùó –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            time_delays = settings.get_time_delays()
            busy_delay = time_delays['are_you_busy_delay']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
            time_since = (current_time - last_message.created_at).total_seconds()
            if time_since < busy_delay:
                return
                
            self.log_test_info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º '–ó–∞–Ω—è—Ç–∞?' –¥–ª—è —á–∞—Ç–∞ {chat.id} (–ø—Ä–æ—à–ª–æ {time_since:.1f}—Å, –Ω—É–∂–Ω–æ {busy_delay}—Å)")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∞ –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            messages_after = [
                msg for msg in recent_messages 
                if msg.created_at > last_message.created_at and not msg.is_from_ai
            ]
            
            if messages_after:
                return  # –û–Ω–∞ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∞
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ —É–∂–µ "–ó–∞–Ω—è—Ç–∞?"
            recent_ai_messages = [msg for msg in recent_messages[-5:] if msg.is_from_ai]
            busy_questions = [
                msg for msg in recent_ai_messages 
                if any(word in (msg.text or "").lower() for word in ["–∑–∞–Ω—è—Ç–∞", "busy", "—Å–≤–æ–±–æ–¥–Ω–∞"])
            ]
            
            if busy_questions:
                return  # –£–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ó–∞–Ω—è—Ç–∞?"
            messages = ["–ó–∞–Ω—è—Ç–∞?", "–°–≤–æ–±–æ–¥–Ω–∞?", "–ö–∞–∫ –¥–µ–ª–∞?"]
            message = random.choice(messages)
            await self._send_initiative_message_fast(chat, message, "are_you_busy")
            self.log_test_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ó–∞–Ω—è—Ç–∞?' –≤ —á–∞—Ç {chat.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ '–ó–∞–Ω—è—Ç–∞?' –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}")

    async def _send_initiative_message_fast(self, chat: Chat, message: str, message_type: str):
        """–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # ‚ùó –ù–û–í–û–ï: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            time_delays = settings.get_time_delays()
            min_delay = time_delays['initiative_min_delay']
            max_delay = time_delays['initiative_max_delay']
            
            delay = random.randint(min_delay, max_delay)
            send_time = self.get_current_time() + timedelta(seconds=delay)
            
            self.response_queue.append({
                'chat_id': chat.id,
                'telegram_user_id': chat.telegram_user_id,
                'message_text': message,
                'send_time': send_time,
                'message_batch': None,  # –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                'initiative_type': message_type
            })
            
            self.log_test_info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_type}) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat.id} —á–µ—Ä–µ–∑ {delay}—Å: {message}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç self.get_current_time() –≤–º–µ—Å—Ç–æ datetime.utcnow()

    async def _check_new_messages(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            active_chats = db_manager.get_active_chats()

            for chat in active_chats:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
                if chat.id in self.stopped_chats:
                    continue
                    
                await self._process_chat_simple(chat)

            self.stats['processed_chats'] = len([c for c in active_chats if c.id not in self.stopped_chats])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _process_chat_simple(self, chat):
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π"""
        try:
            chat_id = chat.id
            last_processed_id = self.last_processed_message_ids.get(chat_id, 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —á–∞—Ç
            if chat_id in self.stopped_chats:
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_batch = db_manager.get_unprocessed_user_messages(
                chat_id=chat_id,
                last_processed_id=last_processed_id,
                time_window_seconds=60
            )

            if not message_batch.messages:
                return

            # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–¢ –õ–ò –£–ñ–ï –û–¢–í–ï–¢–ê –í –û–ß–ï–†–ï–î–ò
            pending_response = None
            for i, response in enumerate(self.response_queue):
                if response['chat_id'] == chat_id:
                    pending_response = response
                    pending_index = i
                    break

            if pending_response:
                # –ï–°–õ–ò –ï–°–¢–¨ –ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø - –û–ë–ù–û–í–õ–Ø–ï–ú –û–¢–í–ï–¢
                self.log_test_info(f"–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                self.response_queue.pop(pending_index)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
                response_text = await self.response_generator.generate_response_for_batch(
                    chat_id, message_batch
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª
                if response_text and self._is_stop_signal(response_text):
                    await self._transfer_to_human(chat_id, message_batch, response_text)
                    return

                if response_text:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–º–µ–Ω—å—à–µ, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∂–¥–∞–ª–∏)
                    delay = self._calculate_natural_delay_fast(message_batch, chat_id) // 2
                    send_time = self.get_current_time() + timedelta(seconds=delay)

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    self.response_queue.append({
                        'chat_id': chat_id,
                        'telegram_user_id': chat.telegram_user_id,
                        'message_text': response_text,
                        'send_time': send_time,
                        'message_batch': message_batch
                    })

                    self.log_test_info(f"–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay}—Å")

                # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                self.last_processed_message_ids[chat_id] = message_batch.messages[-1].id
                return

            # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï –û–¢–í–ï–ß–ê–õ–ò –õ–ò –ú–´ –ù–ï–î–ê–í–ù–û
            recent_messages = db_manager.get_chat_messages(chat_id, limit=5)
            if recent_messages and recent_messages[-1].is_from_ai:
                time_since_our_response = (self.get_current_time() - recent_messages[-1].created_at).total_seconds()
                min_gap = 30 if settings.test_mode else 300  # 30 —Å–µ–∫ –≤ —Ç–µ—Å—Ç–µ, 5 –º–∏–Ω –≤ –ø—Ä–æ–¥–µ
                if time_since_our_response < min_gap:
                    return

            self.log_test_info(f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {len(message_batch.messages)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
            if not self.response_generator.should_respond(chat_id, message_batch):
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = await self.response_generator.generate_response_for_batch(
                chat_id, message_batch
            )

            if not response_text:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª
            if self._is_stop_signal(response_text):
                await self._transfer_to_human(chat_id, message_batch, response_text)
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delay = self._calculate_natural_delay_fast(message_batch, chat_id)
            send_time = self.get_current_time() + timedelta(seconds=delay)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.response_queue.append({
                'chat_id': chat_id,
                'telegram_user_id': chat.telegram_user_id,
                'message_text': response_text,
                'send_time': send_time,
                'message_batch': message_batch
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            self.last_processed_message_ids[chat_id] = message_batch.messages[-1].id

            self.log_test_info(f"–û—Ç–≤–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ {delay}—Å")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat.id}: {e}")

    def _calculate_natural_delay_fast(self, message_batch: MessageBatch, chat_id: int) -> int:
        """–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if settings.test_mode:
            # –í —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1-5 —Å–µ–∫—É–Ω–¥
            return random.randint(1, 5)
        elif settings.dev_mode:
            # –í –¥–µ–≤ —Ä–µ–∂–∏–º–µ 5-15 —Å–µ–∫—É–Ω–¥
            return random.randint(5, 15)
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            base_delay = random.randint(8, 25)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ
            current_hour = datetime.now().hour
            if 0 <= current_hour < 7:
                base_delay *= 2
            elif 9 <= current_hour < 18:
                base_delay *= 0.8
            elif 22 <= current_hour < 24:
                base_delay *= 1.5

            message_length = len(message_batch.total_text)
            if message_length > 100:
                base_delay += random.randint(5, 15)

            if len(message_batch.messages) > 1:
                base_delay += len(message_batch.messages) * 3

            try:
                facts = db_manager.get_person_facts(chat_id)
                fact_count = len(facts)

                if fact_count >= 3:
                    base_delay *= 0.7
                elif fact_count == 0:
                    base_delay *= 1.3
            except Exception:
                pass

            randomness = random.uniform(0.7, 1.3)
            final_delay = int(base_delay * randomness)

            return max(5, min(final_delay, 180))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª–æ–≤
    def _is_stop_signal(self, response_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª–æ–º"""
        if not response_text:
            return False
            
        response_lower = response_text.lower()
        
        stop_phrases = [
            "–æ–∫–µ–π, –¥–∞–≤–∞–π! —Å–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—É—Å—å",
            "–¥–∞–≤–∞–π —Å–æ–∑–≤–æ–Ω–∏–º—Å—è",
            "–Ω–∞–±–µ—Ä—É —Ç–µ–±–µ",
            "–ø–æ–∑–≤–æ–Ω—é —Ç–µ–±–µ",
            "–º–æ–∂–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è",
            "—É–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞"
        ]
        
        return any(phrase in response_lower for phrase in stop_phrases)

    # –ü–µ—Ä–µ–¥–∞—á–∞ —á–µ–ª–æ–≤–µ–∫—É
    async def _transfer_to_human(self, chat_id: int, message_batch: MessageBatch, response_text: str):
        """–ü–µ—Ä–µ–¥–∞–µ–º —á–∞—Ç —á–µ–ª–æ–≤–µ–∫—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ò"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            chat = db_manager.get_chat_by_id(chat_id)
            if chat:
                success = await self.telegram_client.send_message(
                    chat.telegram_user_id, response_text
                )
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    db_manager.add_message(
                        chat_id=chat_id,
                        text=response_text,
                        is_from_ai=True
                    )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç
            self.stopped_chats.add(chat_id)
            
            # –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î
            db_manager.mark_dialogue_success(chat_id, "wants_call")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            await self._notify_operator(chat_id, message_batch, response_text)
            
            self.stats['transferred_to_human'] += 1
            logger.critical(f"üéØ –ß–ê–¢ {chat_id} –ü–ï–†–ï–î–ê–ù –ß–ï–õ–û–í–ï–ö–£! –°—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª: {response_text[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —á–∞—Ç–∞ {chat_id} —á–µ–ª–æ–≤–µ–∫—É: {e}")

    async def _notify_operator(self, chat_id: int, message_batch: MessageBatch, final_response: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø–µ—Ä–µ–¥–∞—á–µ —á–∞—Ç–∞"""
        try:
            chat = db_manager.get_chat_by_id(chat_id)
            if not chat:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            context = db_manager.get_recent_conversation_context(chat_id, limit=20)
            facts = db_manager.get_person_facts(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = f"""üéØ –°–¢–û–ü-–°–ò–ì–ù–ê–õ! –ß–∞—Ç –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É

üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞: {chat.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{chat.username or '–Ω–µ—Ç username'})
üì± Telegram ID: {chat.telegram_user_id}
üí¨ Chat ID: {chat_id}

üî• –°—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª: {final_response}

üìù –§–∞–∫—Ç—ã –æ –Ω–µ–π:"""
            
            for fact in facts[:5]:  # –¢–æ–ø 5 —Ñ–∞–∫—Ç–æ–≤
                notification += f"\n   ‚Ä¢ {fact.fact_type}: {fact.fact_value}"
                
            notification += f"\n\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{context[-500:]}"  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ .env)
            operator_id = getattr(settings, 'operator_telegram_id', None)
            
            if operator_id:
                await self.telegram_client.send_message(operator_id, notification)
                logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                # –ü–∏—à–µ–º –≤ –ª–æ–≥ –µ—Å–ª–∏ –Ω–µ—Ç ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                logger.critical(f"üì¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–£:\n{notification}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

    async def _send_ready_responses(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        current_time = self.get_current_time()  # ‚ùó –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

        ready_responses = []
        remaining_responses = []

        for response in self.response_queue:
            if response['send_time'] <= current_time:
                ready_responses.append(response)
            else:
                remaining_responses.append(response)

        self.response_queue = remaining_responses

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ
        for response in ready_responses:
            self.log_test_info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {response['chat_id']}")
            await self._send_response_naturally(response)

    async def _send_response_naturally(self, response: Dict):
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            chat_id = response['chat_id']
            telegram_user_id = response['telegram_user_id']
            message_text = response['message_text']
            message_batch = response['message_batch']
            initiative_type = response.get('initiative_type')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not await self.telegram_client.ensure_connection():
                logger.error(f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}")
                self.stats['failed_responses'] += 1
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º (—Å –ø—Ä–æ—á—Ç–µ–Ω–∏–µ–º –∏ typing –≤–Ω—É—Ç—Ä–∏)
            success = await self.telegram_client.send_message(
                telegram_user_id, message_text
            )

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                db_manager.add_message(
                    chat_id=chat_id,
                    text=message_text,
                    is_from_ai=True
                )

                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ
                if message_batch:
                    db_manager.mark_messages_as_processed(message_batch)

                if initiative_type:
                    self.stats['initiative_messages'] += 1
                    self.log_test_info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({initiative_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                else:
                    self.stats['sent_responses'] += 1
                    self.log_test_info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            else:
                self.stats['failed_responses'] += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            self.stats['failed_responses'] += 1

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async def send_manual_message(self, user_id: int, message: str) -> bool:
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not await self.telegram_client.ensure_connection():
                return False

            success = await self.telegram_client.send_message(user_id, message)

            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                chat = db_manager.get_or_create_chat(telegram_user_id=user_id)
                db_manager.add_message(
                    chat_id=chat.id,
                    text=message,
                    is_from_ai=True
                )

                logger.info(f"‚úÖ –†—É—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")

            return success

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        telegram_status = self.telegram_client.get_status()

        status = {
            'monitoring': self.is_monitoring,
            'telegram_connected': telegram_status['connected'],
            'response_queue_size': len(self.response_queue),
            'active_chats': len(db_manager.get_active_chats()),
            'stopped_chats': len(self.stopped_chats),
            'stats': self.stats.copy(),
            'telegram_stats': telegram_status.get('stats', {})
        }

        # ‚ùó –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–µ
        if settings.test_mode:
            status['test_mode'] = True
            status['virtual_time'] = self.get_moscow_time().strftime('%H:%M:%S')
            status['time_multiplier'] = settings.get_time_multiplier()
        elif settings.dev_mode:
            status['dev_mode'] = True
            status['time_multiplier'] = settings.get_time_multiplier()

        return status

    async def get_dialogs(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self.telegram_client.ensure_connection():
            return []

        return await self.telegram_client.get_dialogs()

    def get_queue_info(self) -> List[Dict[str, Any]]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        queue_info = []
        current_time = self.get_current_time()  # ‚ùó –ù–û–í–û–ï: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

        for response in sorted(self.response_queue, key=lambda x: x['send_time']):
            time_to_send = (response['send_time'] - current_time).total_seconds()
            
            delay_reason = 'natural_timing'
            if response.get('initiative_type'):
                delay_reason = f"initiative_{response['initiative_type']}"
                
            queue_info.append({
                'chat_id': response['chat_id'],
                'message_preview': response['message_text'][:50] + "...",
                'time_to_send_seconds': max(0, time_to_send),
                'delay_reason': delay_reason
            })

        return queue_info