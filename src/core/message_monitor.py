"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Set
from loguru import logger

from ..config.settings import settings
from ..database.database import db_manager, MessageBatch
from ..database.models import Chat
from ..utils.helpers import get_random_delay, get_smart_delay
from .telegram_client import TelegramAIClient
from .response_generator import ResponseGenerator


class MessageMonitor:
    """–£–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.telegram_client = TelegramAIClient()
        self.response_generator = ResponseGenerator()
        self.is_monitoring = False
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        self.last_processed_message_ids: Dict[int, int] = {}  # chat_id -> last_message_id
        
        # –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–º–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.response_queue: List[Dict] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats = {
            'processed_chats': 0,
            'processed_message_batches': 0,
            'sent_responses': 0,
            'failed_responses': 0,
            'reconnections': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_grouping_window = 30  # —Å–µ–∫—É–Ω–¥
        self.max_concurrent_chats = settings.max_concurrent_chats
        
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
            if not await self.telegram_client.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
                return False
            
            if not await self.telegram_client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._initialize_processed_state()
            
            self.is_monitoring = True
            logger.info("üöÄ –£–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üì± –ü–µ—Ä—Å–æ–Ω–∞–∂: {self.response_generator.character.name}")
            logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.monitor_interval} —Å–µ–∫")
            logger.info(f"üì¶ –û–∫–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_grouping_window} —Å–µ–∫")
            logger.info(f"üë• –ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.max_concurrent_chats}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._monitoring_loop()
            
            return True
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if self.telegram_client:
                await self.telegram_client.stop_monitoring()
            logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        await self.telegram_client.stop_monitoring()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _initialize_processed_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            active_chats = db_manager.get_active_chats()
            
            for chat in active_chats:
                last_id = db_manager.get_last_processed_message_id(chat.id)
                self.last_processed_message_ids[chat.id] = last_id
                
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {len(active_chats)} —á–∞—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        logger.info(f"–ù–∞—á–∞—Ç —É–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {settings.monitor_interval} —Å–µ–∫—É–Ω–¥")
        
        while self.is_monitoring:
            try:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
                if not await self.telegram_client.ensure_connection():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∂–¥–µ–º...")
                    await asyncio.sleep(settings.monitor_interval * 2)
                    self.stats['reconnections'] += 1
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
                await self._process_response_queue()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._check_new_messages()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._log_stats()
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                await asyncio.sleep(settings.monitor_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(settings.monitor_interval)
    
    async def _check_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –ë–î
            active_chats = db_manager.get_active_chats()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            for i in range(0, len(active_chats), self.max_concurrent_chats):
                batch_chats = active_chats[i:i + self.max_concurrent_chats]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —á–∞—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = [self._process_chat_smart(chat) for chat in batch_chats]
                await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + self.max_concurrent_chats < len(active_chats):
                    await asyncio.sleep(1)
            
            self.stats['processed_chats'] = len(active_chats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _process_chat_smart(self, chat):
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            chat_id = chat.id
            last_processed_id = self.last_processed_message_ids.get(chat_id, 0)

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            message_batch = db_manager.get_unprocessed_user_messages(
                chat_id=chat_id,
                last_processed_id=last_processed_id,
                time_window_seconds=self.message_grouping_window
            )

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not message_batch.messages:
                return

            logger.info(f"üì¨ –ù–æ–≤—ã–π –ø–∞–∫–µ—Ç –≤ —á–∞—Ç–µ {chat_id}: {message_batch.get_context_summary()}")

            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π ResponseGenerator
            response_text = await self.response_generator.generate_response_for_batch(
                chat_id,
                message_batch
            )

            if not response_text:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            if self._is_dialogue_termination_signal(response_text):
                logger.warning(f"üö® –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ —á–∞—Ç–µ {chat_id}: {response_text}")
                self._handle_dialogue_termination(chat_id, "crypto_negative_reaction")
                # –í—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            context = db_manager.get_chat_context(chat_id)
            current_hour = datetime.now().hour

            # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            delay = get_smart_delay(current_hour, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
                                    context.relationship_stage if context else 'initial')

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤
            send_time = datetime.utcnow() + timedelta(seconds=delay)

            self.response_queue.append({
                'chat_id': chat_id,
                'telegram_user_id': chat.telegram_user_id,
                'message_text': response_text,
                'send_time': send_time,
                'message_batch': message_batch,
                'delay_reason': f"smart_delay(—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å, {current_hour}h)"
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.last_processed_message_ids[chat_id] = message_batch.messages[-1].id
            self.stats['processed_message_batches'] += 1

            logger.info(f"üìÖ –û—Ç–≤–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ {delay}—Å")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat.id}: {e}")

    def _is_dialogue_termination_signal(self, response_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        termination_phrases = [
            "–∫–∞–∂–¥–æ–º—É —Å–≤–æ—ë",
            "—É–¥–∞—á–∏ —Ç–µ–±–µ",
            "–ø–æ–Ω—è—Ç–Ω–æ, –Ω–µ —Ç–≤–æ—ë",
            "–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ"
        ]

        response_lower = response_text.lower()
        return any(phrase in response_lower for phrase in termination_phrases)

    def _handle_dialogue_termination(self, chat_id: int, reason: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞
            db_manager.update_dialogue_outcome(chat_id, "failure", reason)

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç
            with db_manager.get_session() as session:
                chat = session.query(Chat).filter(Chat.id == chat_id).first()
                if chat:
                    chat.is_active = False
                    session.commit()

            logger.warning(f"üîö –î–∏–∞–ª–æ–≥ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    def _detect_batch_emotion(self, message_batch: MessageBatch) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        combined_text = message_batch.total_text.lower()
        
        negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—É—Å—Ç–∞–ª–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–±–æ–ª–∏—Ç']
        positive_words = ['–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '—Ä–∞–¥–∞', '—Å—á–∞—Å—Ç–ª–∏–≤–∞']
        
        if any(word in combined_text for word in negative_words):
            return '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π'
        elif any(word in combined_text for word in positive_words):
            return '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π'
        else:
            return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'
    
    async def _process_response_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
        current_time = datetime.utcnow()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.response_queue.sort(key=lambda x: x['send_time'])
        
        responses_to_send = []
        remaining_responses = []
        
        for response in self.response_queue:
            if response['send_time'] <= current_time:
                responses_to_send.append(response)
            else:
                remaining_responses.append(response)
        
        self.response_queue = remaining_responses
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        for response in responses_to_send:
            await self._send_response_with_guarantee(response)
    
    async def _send_response_with_guarantee(self, response: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            chat_id = response['chat_id']
            telegram_user_id = response['telegram_user_id']
            message_text = response['message_text']
            message_batch = response['message_batch']
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not await self.telegram_client.ensure_connection():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}")
                self.stats['failed_responses'] += 1
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—á—Ç–µ–Ω–∏–µ –∏ typing)
            success = await self.telegram_client.send_message(
                telegram_user_id,
                message_text
            )
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                db_manager.add_message(
                    chat_id=chat_id,
                    text=message_text,
                    is_from_ai=True
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –ø–∞–∫–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                db_manager.mark_messages_as_processed(message_batch)
                
                self.stats['sent_responses'] += 1
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}: {message_text[:50]}...")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç {chat_id}")
                self.stats['failed_responses'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            self.stats['failed_responses'] += 1
    
    async def send_manual_message(self, user_id: int, message: str) -> bool:
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not await self.telegram_client.ensure_connection():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False
            
            success = await self.telegram_client.send_message(user_id, message)
            
            if success:
                # –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –≤ –ë–î
                chat = db_manager.get_or_create_chat(telegram_user_id=user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                db_manager.add_message(
                    chat_id=chat.id,
                    text=message,
                    is_from_ai=True
                )
                
                logger.info(f"‚úÖ –†—É—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def _log_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ N –∏—Ç–µ—Ä–∞—Ü–∏–π"""
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if self.stats['processed_chats'] % 60 == 0 and self.stats['processed_chats'] > 0:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á–∞—Ç—ã={self.stats['processed_chats']}, "
                       f"–ø–∞–∫–µ—Ç—ã={self.stats['processed_message_batches']}, "
                       f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ={self.stats['sent_responses']}, "
                       f"–æ—à–∏–±–æ–∫={self.stats['failed_responses']}, "
                       f"–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π={self.stats['reconnections']}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        telegram_status = self.telegram_client.get_status()
        
        return {
            'monitoring': self.is_monitoring,
            'telegram_connected': telegram_status['connected'],
            'telegram_running': telegram_status['running'],
            'response_queue_size': len(self.response_queue),
            'active_chats': len(db_manager.get_active_chats()),
            'processed_message_ids_count': len(self.last_processed_message_ids),
            'stats': self.stats.copy(),
            'telegram_stats': telegram_status.get('stats', {}),
            'settings': {
                'monitor_interval': settings.monitor_interval,
                'message_grouping_window': self.message_grouping_window,
                'max_concurrent_chats': self.max_concurrent_chats
            }
        }
    
    async def get_dialogs(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self.telegram_client.ensure_connection():
            return []
        
        return await self.telegram_client.get_dialogs()
    
    def get_queue_info(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        queue_info = []
        current_time = datetime.utcnow()
        
        for response in sorted(self.response_queue, key=lambda x: x['send_time']):
            time_to_send = (response['send_time'] - current_time).total_seconds()
            queue_info.append({
                'chat_id': response['chat_id'],
                'message_preview': response['message_text'][:50] + "...",
                'time_to_send_seconds': max(0, time_to_send),
                'delay_reason': response.get('delay_reason', 'unknown')
            })
        
        return queue_info

    def get_analytics_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            analytics_summary = db_manager.get_analytics_summary()

            return {
                "total_active_chats": len(db_manager.get_active_chats()),
                "analytics_summary": analytics_summary,
                "current_queue_size": len(self.response_queue),
                "processing_stats": self.stats.copy()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {}