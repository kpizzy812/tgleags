"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —á–µ—Ä–µ–∑ Telethon (MVP –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
"""
import asyncio
import random
import time
from typing import Optional, List, Dict, Any
from telethon import TelegramClient, events
from telethon.errors import (
    FloodWaitError, SessionPasswordNeededError, PhoneCodeInvalidError,
    PhoneNumberInvalidError, PeerFloodError, UserDeactivatedBanError,
    ChatWriteForbiddenError, SlowModeWaitError, AuthKeyUnregisteredError
)
from telethon.tl.types import User, Chat, Channel
from loguru import logger

from ..config.settings import settings, get_session_path
from ..database.database import db_manager


class TelegramAIClient:
    """Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è MVP —Å –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.client: Optional[TelegramClient] = None
        self.is_running = False
        self.session_path = get_session_path()
        
        # Rate limiting –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.last_request_time = 0
        self.min_request_delay = 1.5  # –ú–∏–Ω–∏–º—É–º 1.5 —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'reconnections': 0,
            'failed_requests': 0,
            'successful_requests': 0,
            'messages_sent': 0
        }
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.client = TelegramClient(
                self.session_path,
                settings.telegram_api_id,
                settings.telegram_api_hash,
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–æ–≤
                device_model="Desktop",
                system_version="Windows 10", 
                app_version="4.9.0",
                lang_code="en",
                system_lang_code="en-US",
                
                timeout=30,
                request_retries=1,
                connection_retries=2,
                retry_delay=2,
                flood_sleep_threshold=60,
                receive_updates=True,
                auto_reconnect=True,
            )
            
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            if not self.client:
                if not await self.initialize():
                    return False
            
            await self.client.connect()
            
            if not await self.client.is_user_authorized():
                logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                success = await self._authorize()
                if not success:
                    return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await self.client.get_me()
            if me:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username}) ID: {me.id}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            self._setup_event_handlers()
            
            return True
            
        except UserDeactivatedBanError:
            logger.error("‚ùå –ê–ö–ö–ê–£–ù–¢ –ó–ê–ë–ê–ù–ï–ù!")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def ensure_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.client:
            return await self.connect()
        
        if not self.client.is_connected():
            logger.warning("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            try:
                await self.client.connect()
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.stats['reconnections'] += 1
                return False
        
        return True
    
    async def _authorize(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self._rate_limit()
            await self.client.send_code_request(settings.telegram_phone)
            logger.info(f"üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä: {settings.telegram_phone}")
            
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ")
            
            try:
                await self._rate_limit()
                await self.client.sign_in(settings.telegram_phone, code)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return True
                
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                await self._rate_limit()
                await self.client.sign_in(password=password)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
                return True
                
            except PhoneCodeInvalidError:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
                return False
                
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait: {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _rate_limit(self):
        """Rate limiting –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.min_request_delay:
            delay = self.min_request_delay - time_since_last
            await asyncio.sleep(delay)
        
        self.last_request_time = time.time()
    
    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
                if event.is_channel or event.is_group:
                    return
                
                sender = await event.get_sender()
                if not sender or getattr(sender, 'bot', False):
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_incoming_message(event, sender)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        logger.info("üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def _save_incoming_message(self, event, sender: User):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
            chat = db_manager.get_or_create_chat(
                telegram_user_id=sender.id,
                username=getattr(sender, 'username', None),
                first_name=getattr(sender, 'first_name', None),
                last_name=getattr(sender, 'last_name', None)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = event.message.text or ""
            db_manager.add_message(
                chat_id=chat.id,
                text=message_text,
                is_from_ai=False,
                telegram_message_id=event.message.id
            )
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {sender.first_name} ({sender.id}): {message_text[:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_message(self, user_id: int, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        try:
            if not await self.ensure_connection():
                logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                self.stats['failed_requests'] += 1
                return False
            
            await self._rate_limit()
            
            # 1. –ü–†–û–ß–ò–¢–´–í–ê–ï–ú —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                await self.client.send_read_acknowledge(user_id)
                logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
                
                # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
                await asyncio.sleep(random.uniform(1.0, 4.0))
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # 2. –ü–û–ö–ê–ó–´–í–ê–ï–ú "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            typing_duration = min(len(text) * 0.1 + random.uniform(2.0, 5.0), 10.0)
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è typing action
                async with self.client.action(user_id, 'typing'):
                    await asyncio.sleep(typing_duration)
                    
                logger.debug(f"‚å®Ô∏è –ü–æ–∫–∞–∑–∞–ª–∏ '–ø–µ—á–∞—Ç–∞–µ—Ç...' {typing_duration:.1f}—Å –¥–ª—è {user_id}")
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å typing: {e}")
                # –í—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                await asyncio.sleep(typing_duration)
            
            # 3. –û–¢–ü–†–ê–í–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._rate_limit()
            message = await self.client.send_message(user_id, text)
            
            if message:
                self.stats['successful_requests'] += 1
                self.stats['messages_sent'] += 1
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text[:50]}...")
                return True
            else:
                self.stats['failed_requests'] += 1
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return False
                
        except FloodWaitError as e:
            logger.warning(f"‚è≥ Flood wait {e.seconds}—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {user_id}")
            await asyncio.sleep(e.seconds)
            self.stats['failed_requests'] += 1
            return False
            
        except (ChatWriteForbiddenError, PeerFloodError) as e:
            logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            self.stats['failed_requests'] += 1
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            self.stats['failed_requests'] += 1
            return False
    
    async def get_dialogs(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            if not await self.ensure_connection():
                return []
            
            await self._rate_limit()
            
            dialogs = []
            async for dialog in self.client.iter_dialogs(limit=50):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã —Å –ª—é–¥—å–º–∏ (–Ω–µ –±–æ—Ç–∞–º–∏)
                if dialog.is_user and not dialog.entity.bot:
                    dialogs.append({
                        'id': dialog.entity.id,
                        'name': dialog.name,
                        'username': getattr(dialog.entity, 'username', None),
                        'unread_count': dialog.unread_count,
                        'last_message': dialog.message.text if dialog.message else None
                    })
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(0.1)
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
            return dialogs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
        self.is_running = True
        logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∑–∞–ø—É—â–µ–Ω")
        
        try:
            await self.client.run_until_disconnected()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            self.is_running = False
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        if self.client and self.client.is_connected():
            await self.client.disconnect()
        logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.client and self.client.is_connected() if self.client else False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            'connected': self.is_connected(),
            'running': self.is_running,
            'stats': self.stats.copy()
        }